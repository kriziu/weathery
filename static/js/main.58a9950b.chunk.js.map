{"version":3,"sources":["api/forecast.ts","utils/gradients.ts","components/Settings.tsx","constants/styles.ts","components/location/InputLocation.tsx","components/location/MapGoogle.tsx","components/location/LocationSlider.tsx","utils/tempConverter.ts","utils/icons.tsx","components/weather/CurrentWeather.tsx","components/MainComponent.tsx","components/weather/DetailWeather.tsx","components/weather/WeatherContainer.tsx","components/weather/FutureWeather.tsx","components/weather/HourWeather.tsx","components/SecondaryComponent.tsx","theme.ts","components/App.tsx","index.tsx"],"names":["getForecast","coords","a","lat","lng","axios","get","params","lon","appid","result","weather","data","gradients","Settings","forecast","setSettingsShown","settingsShown","useContext","DegreeContext","degree","setDegree","isChecked","useColorModeValue","toggleColorMode","useColorMode","in","direction","style","zIndex","display","justifyContent","onClick","unmountOnExit","bgGradient","icon","color","w","height","px","pb","e","stopPropagation","position","right","top","variant","size","alignItems","mt","onChange","flexDirection","htmlFor","id","borderRadius","transition","InputLocation","setCoords","useState","inputValue","setInputValue","browserCoords","setBrowserCoords","handleLocationSelect","value","geocodeByAddress","getLatLng","latLng","useEffect","navigator","geolocation","getCurrentPosition","pos","latitude","longitude","onSelect","searchOptions","location","google","maps","LatLng","radius","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","length","spacing","border","borderColor","p","map","suggestion","i","padding","backgroundColor","active","key","description","mapStyles","width","mapOptions","streetViewControl","MapGoogle","geoCoords","h","zoom","center","mapContainerStyle","options","LocationSlider","changingLocation","setChangingLocation","bgColor","textAlign","pt","cursor","tempConverter","type","Math","round","icons","CurrentWeather","props","justify","mr","temp","orientation","opacity","main","feels_like","ml","transform","pop","toFixed","wind_speed","wind_deg","MainComponent","setHeight","fetchForecast","ref","useResizeObserver","onResize","toast","useToast","setTimeout","duration","render","bg","closeAll","current","daily","day","StyledSVG","styled","svg","DetailWeather","sunrise","Date","sunset","moonrise","moonset","y","styleOuter","marginTop","xmlns","viewBox","fill","fillOpacity","d","lg","getHours","getMinutes","py","columns","pressure","clouds","uvi","humidity","dew_point","morn","eve","night","WeatherContainer","children","title","margin","mb","md","overflowX","namesOfDays","FutureWeather","days","Object","values","selectedDay","setSelectedDay","isChanging","setIsChanging","dividerColor","index","date","dt","handleSelectedDayChange","my","fontSize","getDay","HourWeather","hours","hour","renderHours","SecondaryComponent","hourly","theme","extendTheme","config","initialColorMode","useSystemColorMode","createContext","App","contextValue","setLocation","setForecast","setLoading","then","res","Geocode","setApiKey","fromLatLng","toString","response","city","state","country","results","address_components","forEach","addressComponent","types","long_name","catch","Provider","path","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.58a9950b.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { icons } from \"../utils/icons\";\r\n\r\ninterface Description {\r\n  description: string;\r\n  icon: keyof typeof icons;\r\n  id: number;\r\n  main: string;\r\n}\r\n\r\n// TODO: Dziedziczenie bo duzo pol sie powtarza\r\n\r\ninterface SmallWeatherType {\r\n  clouds: number;\r\n  dew_point: number;\r\n  dt: number;\r\n  humidity: number;\r\n  pressure: number;\r\n  sunrise: number;\r\n  sunset: number;\r\n  uvi: number;\r\n  weather: Description[];\r\n  wind_deg: number;\r\n  wind_gust: number;\r\n  wind_speed: number;\r\n}\r\n\r\nexport interface WeatherType extends SmallWeatherType {\r\n  feels_like: number;\r\n  temp: number;\r\n  visibility: number;\r\n}\r\n\r\nexport interface FutureWeatherType extends SmallWeatherType {\r\n  feels_like: {\r\n    day: number;\r\n    eve: number;\r\n    morn: number;\r\n    night: number;\r\n  };\r\n  moon_phase: number;\r\n  moonrise: number;\r\n  moonset: number;\r\n  pop: number;\r\n  rain: number;\r\n  temp: {\r\n    day: number;\r\n    eve: number;\r\n    morn: number;\r\n    night: number;\r\n    max: number;\r\n    min: number;\r\n  };\r\n}\r\n\r\nexport interface HourlyWeatherType extends SmallWeatherType {\r\n  feels_like: number;\r\n  pop: number;\r\n  temp: number;\r\n  visibility: number;\r\n}\r\n\r\nexport interface ResponseDataType {\r\n  current: WeatherType;\r\n  daily: FutureWeatherType[];\r\n  hourly: HourlyWeatherType[];\r\n}\r\n\r\nexport const getForecast = async (coords: {\r\n  lat: number;\r\n  lng: number;\r\n}): Promise<ResponseDataType> => {\r\n  const { lat, lng } = coords;\r\n\r\n  const result = await axios.get(\r\n    `https://api.openweathermap.org/data/2.5/onecall`,\r\n    {\r\n      params: {\r\n        lat,\r\n        lon: lng,\r\n        appid: \"8128f6d612d3981a1bcc39e4639592d3\",\r\n      },\r\n    }\r\n  );\r\n\r\n  const weather: ResponseDataType = result.data;\r\n\r\n  return weather;\r\n};\r\n","export const gradients = {\r\n  '01d': 'linear(to-tr, yellow.300, red.500)',\r\n  '01n': 'linear(to-tr, gray.700, black)',\r\n  '02d': 'linear(to-tr, gray.400, gray.500)',\r\n  '02n': 'linear(to-tr, gray.700, black)',\r\n  '03d': 'linear(to-tr, gray.500, gray.600)',\r\n  '03n': 'linear(to-tr, gray.700, black)',\r\n  '04d': 'linear(to-tr, gray.500, gray.700)',\r\n  '04n': 'linear(to-tr, gray.700, black)',\r\n  '09d': 'linear(to-tr, blue.600, gray.600)',\r\n  '09n': 'linear(to-tr, gray.700, black)',\r\n  '10d': 'linear(to-tr, blue.600, gray.600)',\r\n  '10n': 'linear(to-tr, gray.700, black)',\r\n  '11d': 'linear(to-tr, blue.700, gray.700)',\r\n  '11n': 'linear(to-tr, gray.700, black)',\r\n  '13d': 'linear(to-tr, blue.300, blue.50)',\r\n  '13n': 'linear(to-tr, gray.700, black)',\r\n  '50d': 'linear(to-tr, gray.400, gray.500)',\r\n  '50n': 'linear(to-tr, gray.700, black)',\r\n};\r\n","import { FC, useContext } from 'react';\r\n\r\nimport { IconButton } from '@chakra-ui/button';\r\nimport { FormLabel } from '@chakra-ui/form-control';\r\nimport { Box, Flex, Heading } from '@chakra-ui/layout';\r\nimport { Switch } from '@chakra-ui/switch';\r\nimport { Slide } from '@chakra-ui/transition';\r\nimport { useColorMode, useColorModeValue } from '@chakra-ui/color-mode';\r\n\r\nimport { IoClose } from 'react-icons/io5';\r\n\r\nimport { WeatherType } from '../api/forecast';\r\nimport { gradients } from '../utils/gradients';\r\nimport { DegreeContext } from './App';\r\n\r\ninterface SettingsProps {\r\n  forecast: WeatherType;\r\n  settingsShown: boolean;\r\n  setSettingsShown: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst Settings: FC<SettingsProps> = ({\r\n  forecast,\r\n  setSettingsShown,\r\n  settingsShown,\r\n}): JSX.Element => {\r\n  const { degree, setDegree } = useContext(DegreeContext);\r\n  const isChecked = useColorModeValue(false, true);\r\n  const { toggleColorMode } = useColorMode();\r\n\r\n  return (\r\n    <Slide\r\n      in={settingsShown}\r\n      direction=\"right\"\r\n      style={{ zIndex: 5, display: 'flex', justifyContent: 'flex-end' }}\r\n      onClick={() => setSettingsShown(false)}\r\n      unmountOnExit\r\n    >\r\n      <Box\r\n        bgGradient={gradients[forecast.weather[0].icon]}\r\n        color={forecast.weather[0].icon[2] === 'n' ? 'gray.500' : ''}\r\n        w=\"3xs\"\r\n        height=\"full\"\r\n        px={5}\r\n        pb={40}\r\n        onClick={e => e.stopPropagation()}\r\n      >\r\n        <IconButton\r\n          position=\"absolute\"\r\n          right={[4, 6, 8, 10]}\r\n          top={[4, 6, 8, 10]}\r\n          zIndex={10}\r\n          aria-label=\"settings\"\r\n          variant=\"ghost\"\r\n          onClick={() => setSettingsShown(false)}\r\n          icon={<IoClose size={38} />}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-around\" mt={24} px={6}>\r\n          <Heading>C</Heading>\r\n          <Switch\r\n            size=\"lg\"\r\n            aria-label=\"Change to Fahrenheit\"\r\n            onChange={() => setDegree(degree === 'C' ? 'F' : 'C')}\r\n          />\r\n          <Heading>F</Heading>\r\n        </Flex>\r\n\r\n        <Flex\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n          justifyContent=\"center\"\r\n          mt={6}\r\n        >\r\n          <FormLabel htmlFor=\"dark\">\r\n            <Heading size=\"md\">Dark mode</Heading>\r\n          </FormLabel>\r\n          <Switch\r\n            size=\"lg\"\r\n            aria-label=\"Dark mode\"\r\n            id=\"dark\"\r\n            isChecked={isChecked}\r\n            onChange={toggleColorMode}\r\n          />\r\n        </Flex>\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","export const borderRadius = '.5rem';\r\nexport const borderWidth = '1px';\r\nexport const transition = 'all .2s ease';\r\n","import { FC, useEffect, useState } from 'react';\r\n\r\nimport { Input } from '@chakra-ui/input';\r\nimport { Spinner } from '@chakra-ui/spinner';\r\nimport { Box, Center, List, ListItem } from '@chakra-ui/layout';\r\nimport { Collapse } from '@chakra-ui/transition';\r\n\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from 'react-places-autocomplete';\r\n\r\nimport { borderRadius, borderWidth } from '../../constants/styles';\r\n\r\ninterface InputLocationProps {\r\n  setCoords: React.Dispatch<\r\n    React.SetStateAction<{\r\n      lat: number;\r\n      lng: number;\r\n    }>\r\n  >;\r\n}\r\n\r\nconst InputLocation: FC<InputLocationProps> = ({ setCoords }): JSX.Element => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [browserCoords, setBrowserCoords] = useState({ lat: 0, lng: 0 });\r\n\r\n  const handleLocationSelect = async (value: string) => {\r\n    const result = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(result[0]);\r\n    setCoords(latLng);\r\n    setInputValue('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(pos => {\r\n      const coords = { lat: pos.coords.latitude, lng: pos.coords.longitude };\r\n      if (!coords) return;\r\n\r\n      setCoords(coords);\r\n      setBrowserCoords(coords);\r\n    });\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <PlacesAutocomplete\r\n      value={inputValue}\r\n      onChange={setInputValue}\r\n      onSelect={handleLocationSelect}\r\n      searchOptions={{\r\n        location: new google.maps.LatLng(browserCoords),\r\n        radius: 2000,\r\n      }}\r\n    >\r\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <Box px={[5, 10]} position=\"relative\">\r\n          <Input {...getInputProps({ placeholder: 'Search location' })} />\r\n\r\n          <Collapse in={loading} unmountOnExit>\r\n            <Center mt={4}>\r\n              <Spinner />\r\n            </Center>\r\n          </Collapse>\r\n\r\n          <Collapse in={suggestions.length ? true : false} unmountOnExit>\r\n            <List\r\n              zIndex={100}\r\n              w=\"100%\"\r\n              spacing={2}\r\n              border={borderWidth}\r\n              borderColor=\"gray.200\"\r\n              p={2}\r\n              borderRadius={4}\r\n            >\r\n              {suggestions.map((suggestion, i) => {\r\n                const style = {\r\n                  padding: '.5rem',\r\n                  borderRadius: borderRadius,\r\n                  backgroundColor: suggestion.active ? '#e6e6e6' : '',\r\n                };\r\n                return (\r\n                  <ListItem\r\n                    {...getSuggestionItemProps(suggestion, { style })}\r\n                    key={i}\r\n                  >\r\n                    {suggestion.description}\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </Collapse>\r\n        </Box>\r\n      )}\r\n    </PlacesAutocomplete>\r\n  );\r\n};\r\n\r\nexport default InputLocation;\r\n","import { FC } from 'react';\r\n\r\nimport { Box } from '@chakra-ui/layout';\r\nimport { GoogleMap, Marker } from '@react-google-maps/api';\r\n\r\nimport { borderRadius } from '../../constants/styles';\r\n\r\nconst mapStyles = {\r\n  height: '100%',\r\n  width: '100%',\r\n  borderRadius: borderRadius,\r\n};\r\n\r\nconst mapOptions: google.maps.MapOptions = {\r\n  streetViewControl: false,\r\n};\r\n\r\ninterface MapGoogleProps {\r\n  coords: { lat: number; lng: number };\r\n  setCoords: React.Dispatch<\r\n    React.SetStateAction<{\r\n      lat: number;\r\n      lng: number;\r\n    }>\r\n  >;\r\n}\r\n\r\nconst MapGoogle: FC<MapGoogleProps> = ({ coords, setCoords }) => {\r\n  const handleMapClick = (e: any): void => {\r\n    setCoords({ lat: e.latLng.lat(), lng: e.latLng.lng() });\r\n  };\r\n\r\n  let geoCoords = coords;\r\n\r\n  if (coords.lat === 0 && coords.lng === 0)\r\n    geoCoords = { lat: 52.2297, lng: 21.0122 };\r\n\r\n  return (\r\n    <Box h={500}>\r\n      <GoogleMap\r\n        zoom={8}\r\n        center={geoCoords}\r\n        onClick={handleMapClick}\r\n        mapContainerStyle={mapStyles}\r\n        options={mapOptions}\r\n      >\r\n        <Marker position={geoCoords} />\r\n      </GoogleMap>\r\n    </Box>\r\n  );\r\n};\r\nexport default MapGoogle;\r\n","import { FC } from 'react';\r\n\r\nimport { Box, Heading } from '@chakra-ui/layout';\r\nimport { Slide } from '@chakra-ui/transition';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\n\r\nimport InputLocation from './InputLocation';\r\nimport MapGoogle from './MapGoogle';\r\n\r\ninterface LocationSliderProps {\r\n  changingLocation: boolean;\r\n  location: string;\r\n  coords: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  setCoords: React.Dispatch<\r\n    React.SetStateAction<{\r\n      lat: number;\r\n      lng: number;\r\n    }>\r\n  >;\r\n  setChangingLocation: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst LocationSlider: FC<LocationSliderProps> = ({\r\n  changingLocation,\r\n  location,\r\n  coords,\r\n  setCoords,\r\n  setChangingLocation,\r\n}): JSX.Element => {\r\n  const bgColor = useColorModeValue('white', 'gray.800');\r\n  return (\r\n    <Slide in={changingLocation} direction=\"top\" style={{ zIndex: 5 }}>\r\n      <Box bgColor={bgColor} w=\"full\" height=\"full\" px={5} pb={40}>\r\n        <Heading\r\n          size=\"xl\"\r\n          textAlign=\"center\"\r\n          pt={5}\r\n          cursor=\"pointer\"\r\n          onClick={() =>\r\n            location !== 'No location selected' && setChangingLocation(false)\r\n          }\r\n        >\r\n          {location}\r\n        </Heading>\r\n        <InputLocation setCoords={setCoords} />\r\n        <Box p={[5, 10]} height=\"sm\">\r\n          <MapGoogle coords={coords} setCoords={setCoords} />\r\n        </Box>\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default LocationSlider;\r\n","export const tempConverter = (type: 'C' | 'F', value: number): number => {\r\n  return type === 'C'\r\n    ? Math.round(value - 273.15)\r\n    : Math.round(((value - 273.15) * 9) / 5 + 32);\r\n};\r\n","import {\r\n  WiCloud,\r\n  WiCloudy,\r\n  WiDayCloudy,\r\n  WiDayRain,\r\n  WiDaySunny,\r\n  WiFog,\r\n  WiNightClear,\r\n  WiNightCloudy,\r\n  WiNightRain,\r\n  WiRain,\r\n  WiSnow,\r\n  WiThunderstorm,\r\n} from 'react-icons/wi';\r\n\r\nexport const icons = {\r\n  '01d': <WiDaySunny size=\"100%\" />,\r\n  '01n': <WiNightClear size=\"100%\" />,\r\n  '02d': <WiDayCloudy size=\"100%\" />,\r\n  '02n': <WiNightCloudy size=\"100%\" />,\r\n  '03d': <WiCloud size=\"100%\" />,\r\n  '03n': <WiCloud size=\"100%\" />,\r\n  '04d': <WiCloudy size=\"100%\" />,\r\n  '04n': <WiCloudy size=\"100%\" />,\r\n  '09d': <WiRain size=\"100%\" />,\r\n  '09n': <WiRain size=\"100%\" />,\r\n  '10d': <WiDayRain size=\"100%\" />,\r\n  '10n': <WiNightRain size=\"100%\" />,\r\n  '11d': <WiThunderstorm size=\"100%\" />,\r\n  '11n': <WiThunderstorm size=\"100%\" />,\r\n  '13d': <WiSnow size=\"100%\" />,\r\n  '13n': <WiSnow size=\"100%\" />,\r\n  '50d': <WiFog size=\"100%\" />,\r\n  '50n': <WiFog size=\"100%\" />,\r\n};\r\n","import { FC, useContext } from 'react';\r\n\r\nimport { Box, Flex, Heading, HStack } from '@chakra-ui/layout';\r\nimport { Stat, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Divider } from '@chakra-ui/react';\r\n\r\nimport { TiLocationArrow } from 'react-icons/ti';\r\n\r\nimport { WeatherType } from '../../api/forecast';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { icons } from '../../utils/icons';\r\n\r\ninterface CurrentWeatherType extends WeatherType {\r\n  feels_like: number;\r\n  pop: number;\r\n}\r\n\r\nconst CurrentWeather: FC<CurrentWeatherType> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n\r\n  return (\r\n    <Box px={[5, 10]}>\r\n      <Box>\r\n        <Flex justify=\"center\" alignItems=\"center\">\r\n          <HStack height={16} alignItems=\"center\" spacing={2} mr={[2, 10]}>\r\n            <Heading size=\"4xl\">{tempConverter(degree, props.temp)}°</Heading>\r\n            <Divider orientation=\"vertical\" borderColor=\"black\" opacity={0.2} />\r\n            <Heading size=\"lg\">{props.weather[0].main}</Heading>\r\n          </HStack>\r\n          <Box w={24} h={24}>\r\n            {icons[props.weather[0].icon]}\r\n          </Box>\r\n        </Flex>\r\n        <Heading size=\"md\" textAlign=\"center\" mt={3}>\r\n          Feels like {tempConverter(degree, props.feels_like)}°\r\n        </Heading>\r\n      </Box>\r\n      <Flex mt={5} w={[200, 200, 300]} ml=\"50%\" transform=\"translateX(-50%)\">\r\n        <Stat textAlign=\"center\">\r\n          <StatLabel>Precipitation</StatLabel>\r\n          <StatNumber>{(props.pop * 100).toFixed(0)}%</StatNumber>\r\n        </Stat>\r\n        <Stat textAlign=\"center\">\r\n          <StatLabel>Wind</StatLabel>\r\n          <StatNumber>\r\n            <Flex\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              flexDirection=\"column\"\r\n            >\r\n              {props.wind_speed} m/s\r\n              <Box transform={`rotate(${props.wind_deg - 45}deg)`}>\r\n                <TiLocationArrow size={32} />\r\n              </Box>\r\n            </Flex>\r\n          </StatNumber>\r\n        </Stat>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import { FC, useEffect } from 'react';\r\n\r\nimport { IconButton } from '@chakra-ui/button';\r\nimport { Box, Heading } from '@chakra-ui/layout';\r\nimport { useToast } from '@chakra-ui/toast';\r\n\r\nimport { IoSettingsOutline } from 'react-icons/io5';\r\nimport useResizeObserver from 'use-resize-observer';\r\n\r\nimport { ResponseDataType } from '../api/forecast';\r\nimport { gradients } from '../utils/gradients';\r\nimport CurrentWeather from './weather/CurrentWeather';\r\nimport { borderRadius } from '../constants/styles';\r\n\r\ninterface MainComponentProps {\r\n  forecast: ResponseDataType;\r\n  setChangingLocation: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setSettingsShown: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setHeight: React.Dispatch<React.SetStateAction<number>>;\r\n  location: string;\r\n  fetchForecast: () => void;\r\n}\r\n\r\nconst MainComponent: FC<MainComponentProps> = ({\r\n  forecast,\r\n  setChangingLocation,\r\n  setSettingsShown,\r\n  setHeight,\r\n  location,\r\n  fetchForecast,\r\n}): JSX.Element => {\r\n  const { ref } = useResizeObserver({\r\n    onResize: e => {\r\n      e.height && setHeight(e.height);\r\n    },\r\n  });\r\n\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    setTimeout(\r\n      () =>\r\n        toast({\r\n          duration: null,\r\n          render: () => (\r\n            <Box\r\n              color=\"white\"\r\n              p={3}\r\n              bg=\"blue.300\"\r\n              borderRadius={borderRadius}\r\n              px={5}\r\n              onClick={() => {\r\n                fetchForecast();\r\n                toast.closeAll();\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Click to update wether</Heading>\r\n            </Box>\r\n          ),\r\n        }),\r\n      3600000\r\n    );\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      bgGradient={\r\n        forecast\r\n          ? gradients[forecast.current.weather[0].icon]\r\n          : gradients['03d']\r\n      }\r\n      position=\"fixed\"\r\n      width=\"full\"\r\n      ref={ref}\r\n      top={0}\r\n      color={\r\n        forecast && forecast.current.weather[0].icon[2] === 'n'\r\n          ? 'gray.500'\r\n          : 'gray.800'\r\n      }\r\n      pb={[100, 200, 300, 400]}\r\n    >\r\n      <Box p={[5, 10]} position=\"relative\" pb={0}>\r\n        <Heading\r\n          size=\"xl\"\r\n          textAlign=\"center\"\r\n          cursor=\"pointer\"\r\n          mt={12}\r\n          onClick={() => setChangingLocation(true)}\r\n        >\r\n          {location}\r\n        </Heading>\r\n\r\n        <IconButton\r\n          position=\"absolute\"\r\n          right={[4, 6, 8, 10]}\r\n          top={[4, 6, 8, 10]}\r\n          zIndex={5}\r\n          aria-label=\"settings\"\r\n          variant=\"ghost\"\r\n          onClick={() => setSettingsShown(true)}\r\n          icon={<IoSettingsOutline size={38} />}\r\n        />\r\n\r\n        <CurrentWeather\r\n          {...forecast.current}\r\n          feels_like={forecast.daily[0].feels_like.day}\r\n          pop={forecast.daily[0].pop}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MainComponent;\r\n","import { FC, useContext } from 'react';\r\n\r\nimport { Box, Center, Flex, Heading, SimpleGrid } from '@chakra-ui/layout';\r\nimport { Stat, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Divider } from '@chakra-ui/react';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\n\r\nimport { FiSunrise, FiSunset } from 'react-icons/fi';\r\nimport { TiLocationArrow } from 'react-icons/ti';\r\nimport { WiMoonrise, WiMoonset } from 'react-icons/wi';\r\nimport styled from '@emotion/styled';\r\nimport { Parallax } from 'react-scroll-parallax';\r\n\r\nimport { FutureWeatherType } from '../../api/forecast';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { gradients } from '../../utils/gradients';\r\nimport { transition } from '../../constants/styles';\r\n\r\nconst StyledSVG = styled.svg`\r\n  display: block;\r\n  left: 0;\r\n  transform: rotate(180deg) translateY(1px);\r\n`;\r\n\r\nconst DetailWeather: FC<FutureWeatherType> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n  const sunrise = new Date(props.sunrise * 1000);\r\n  const sunset = new Date(props.sunset * 1000);\r\n  const moonrise = new Date(props.moonrise * 1000);\r\n  const moonset = new Date(props.moonset * 1000);\r\n\r\n  const bgColor = useColorModeValue('#fff', '#171923');\r\n\r\n  return (\r\n    <Parallax y={[20, 0]} styleOuter={{ marginTop: '-3rem' }}>\r\n      <Box\r\n        bgGradient={gradients[props.weather[0].icon]}\r\n        pb={10}\r\n        color=\"gray.800\"\r\n      >\r\n        <StyledSVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n          <path\r\n            fill={bgColor}\r\n            style={{ transition }}\r\n            fillOpacity=\"1\"\r\n            d=\"M0,128L48,133.3C96,139,192,149,288,144C384,139,480,117,576,106.7C672,96,768,96,864,112C960,128,1056,160,1152,170.7C1248,181,1344,171,1392,165.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n          ></path>\r\n        </StyledSVG>\r\n        <Heading size=\"xl\" textAlign=\"center\" mt={-2}>\r\n          Details\r\n        </Heading>\r\n\r\n        <Box\r\n          w={{ lg: 350 }}\r\n          ml={{ lg: '50%' }}\r\n          transform={{ lg: 'translateX(-50%)' }}\r\n        >\r\n          <Flex mt={5} px={['10vw', '20vw', '30vw', 0]}>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <FiSunrise size={24} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {sunrise.getHours()}:\r\n                {sunrise.getMinutes() < 10\r\n                  ? '0' + sunrise.getMinutes()\r\n                  : sunrise.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <FiSunset size={24} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {sunset.getHours()}:\r\n                {sunset.getMinutes() < 10\r\n                  ? '0' + sunset.getMinutes()\r\n                  : sunset.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n          </Flex>\r\n          <Center>\r\n            <Divider borderColor=\"black\" opacity={0.1} w={64} py={2} />\r\n          </Center>\r\n\r\n          <SimpleGrid\r\n            mt={5}\r\n            px={['10vw', '20vw', '30vw', 0]}\r\n            columns={3}\r\n            spacing={2}\r\n          >\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Pressure</StatLabel>\r\n              <StatNumber>{props.pressure}</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Rain</StatLabel>\r\n              <StatNumber>{(props.pop * 100).toFixed()}%</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Clouds</StatLabel>\r\n              <StatNumber>{props.clouds}%</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>UV</StatLabel>\r\n              <StatNumber>{props.uvi}</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Humidity</StatLabel>\r\n              <StatNumber>{props.humidity}%</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Dew point</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.dew_point)}°</StatNumber>\r\n            </Stat>\r\n          </SimpleGrid>\r\n          <Center>\r\n            <Divider borderColor=\"black\" opacity={0.1} w={64} py={2} />\r\n          </Center>\r\n          <Heading size=\"md\" textAlign=\"center\" mt={5}>\r\n            Temperature\r\n          </Heading>\r\n          <Flex px={['10vw', '20vw', '30vw', 0]} mt={2}>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Morning</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.temp.morn)}°</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Day</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.temp.day)}°</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Evening</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.temp.eve)}°</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Night</StatLabel>\r\n              <StatNumber>\r\n                {tempConverter(degree, props.temp.night)}°\r\n              </StatNumber>\r\n            </Stat>\r\n          </Flex>\r\n\r\n          <Stat textAlign=\"center\">\r\n            <StatLabel>\r\n              <Heading size=\"sm\" textAlign=\"center\" mt={5}>\r\n                Wind\r\n              </Heading>\r\n            </StatLabel>\r\n            <StatNumber>\r\n              <Flex\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                flexDirection=\"column\"\r\n              >\r\n                {props.wind_speed} m/s\r\n                <Box transform={`rotate(${props.wind_deg - 45}deg)`}>\r\n                  <TiLocationArrow size={32} />\r\n                </Box>\r\n              </Flex>\r\n            </StatNumber>\r\n          </Stat>\r\n\r\n          <Flex mt={5} px={['10vw', '20vw', '30vw', 0]}>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <WiMoonrise size={34} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {moonrise.getHours()}:\r\n                {moonrise.getMinutes() < 10\r\n                  ? '0' + moonrise.getMinutes()\r\n                  : moonrise.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <WiMoonset size={34} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {moonset.getHours()}:\r\n                {moonset.getMinutes() < 10\r\n                  ? '0' + moonset.getMinutes()\r\n                  : moonset.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Parallax>\r\n  );\r\n};\r\n\r\nexport default DetailWeather;\r\n","import { FC } from 'react';\r\n\r\nimport { Box, Heading, HStack } from '@chakra-ui/layout';\r\n\r\nconst WeatherContainer: FC<{ title: string; margin?: number }> = ({\r\n  children,\r\n  title,\r\n  margin = 14,\r\n}): JSX.Element => {\r\n  return (\r\n    <Box\r\n      mb={margin}\r\n      w={{ md: 500, lg: 750 }}\r\n      ml={{ md: '50%' }}\r\n      transform={{ md: 'translateX(-50%)' }}\r\n      px={[5, 10]}\r\n      position=\"relative\"\r\n      zIndex={1}\r\n    >\r\n      <Heading mb={4}>{title}</Heading>\r\n      <HStack spacing={6} overflowX=\"scroll\" px={2} pb={4}>\r\n        {children}\r\n      </HStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WeatherContainer;\r\n","import { FC, useContext, Fragment, useState } from 'react';\r\n\r\nimport { Box, Flex } from '@chakra-ui/layout';\r\nimport { Stat, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Divider } from '@chakra-ui/react';\r\nimport { SlideFade } from '@chakra-ui/transition';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\n\r\nimport DetailWeather from './DetailWeather';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { FutureWeatherType } from '../../api/forecast';\r\nimport { icons } from '../../utils/icons';\r\nimport WeatherContainer from './WeatherContainer';\r\nimport { borderRadius } from '../../constants/styles';\r\n\r\nconst namesOfDays = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n];\r\n\r\nconst FutureWeather: FC<FutureWeatherType[]> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n  const days = Object.values(props);\r\n\r\n  const [selectedDay, setSelectedDay] = useState(0);\r\n  const [isChanging, setIsChanging] = useState(false);\r\n  const bgColor = useColorModeValue('gray.100', 'gray.700');\r\n  const dividerColor = useColorModeValue('gray.700', 'gray.100');\r\n\r\n  const handleSelectedDayChange = (index: number): void => {\r\n    setIsChanging(true);\r\n\r\n    setTimeout(() => {\r\n      setSelectedDay(index);\r\n      setIsChanging(false);\r\n    }, 200);\r\n  };\r\n\r\n  const renderDays = (): JSX.Element[] => {\r\n    return days.map((day, index) => {\r\n      const date = new Date(day.dt * 1000);\r\n\r\n      return (\r\n        <Fragment key={index}>\r\n          <Flex\r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            p={4}\r\n            bgColor={index === selectedDay ? bgColor : 'transparent'}\r\n            borderRadius={borderRadius}\r\n            cursor=\"pointer\"\r\n            onClick={() => handleSelectedDayChange(index)}\r\n            transition=\"all .2s\"\r\n          >\r\n            <Box w={12} h={12}>\r\n              {icons[day.weather[0].icon]}\r\n            </Box>\r\n\r\n            <Divider borderColor={dividerColor} opacity={0.1} my={2} />\r\n            <Stat textAlign=\"center\">\r\n              <StatNumber>{tempConverter(degree, day.temp.day)}°</StatNumber>\r\n              <StatNumber fontSize=\"md\">\r\n                {tempConverter(degree, day.temp.night)}°\r\n              </StatNumber>\r\n              <StatLabel>\r\n                {index === 0 ? 'Today' : namesOfDays[date.getDay()]}\r\n              </StatLabel>\r\n            </Stat>\r\n          </Flex>\r\n          {index !== days.length - 1 && (\r\n            <Divider\r\n              orientation=\"vertical\"\r\n              height={20}\r\n              borderColor={dividerColor}\r\n              opacity={0.1}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <WeatherContainer title=\"Forecast\" margin={-6}>\r\n        {renderDays()}\r\n      </WeatherContainer>\r\n      <SlideFade in={!isChanging}>\r\n        <DetailWeather {...days[selectedDay]} />\r\n      </SlideFade>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FutureWeather;\r\n","import { FC, useContext, Fragment } from 'react';\r\n\r\nimport { Flex } from '@chakra-ui/layout';\r\nimport { Stat, StatHelpText, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Center, Divider } from '@chakra-ui/react';\r\nimport { Text } from '@chakra-ui/layout';\r\n\r\nimport { WiRaindrop } from 'react-icons/wi';\r\n\r\nimport { HourlyWeatherType } from '../../api/forecast';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { icons } from '../../utils/icons';\r\nimport WeatherContainer from './WeatherContainer';\r\n\r\nconst HourWeather: FC<HourlyWeatherType[]> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n\r\n  const renderHours = (): JSX.Element[] => {\r\n    const hours = Object.values(props);\r\n\r\n    return hours.map((hour, index) => {\r\n      const date = new Date(hour.dt * 1000);\r\n\r\n      return (\r\n        <Fragment key={index}>\r\n          <Stat textAlign=\"center\">\r\n            <StatLabel fontSize=\"lg\">{date.getHours()}:00</StatLabel>\r\n            <Center w={12} h={12}>\r\n              {icons[hour.weather[0].icon]}\r\n            </Center>\r\n            <StatNumber>{tempConverter(degree, hour.temp)}°</StatNumber>\r\n            <StatHelpText ml={-4}>\r\n              <Center>\r\n                <Flex alignItems=\"center\">\r\n                  <WiRaindrop size={40} />\r\n                  <Text ml={-2}>{(hour.pop * 100).toFixed(0)}%</Text>\r\n                </Flex>\r\n              </Center>\r\n            </StatHelpText>\r\n          </Stat>\r\n          {index !== hours.length - 1 && (\r\n            <Divider\r\n              orientation=\"vertical\"\r\n              height={20}\r\n              borderColor=\"black\"\r\n              opacity={0.1}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      );\r\n    });\r\n  };\r\n\r\n  return <WeatherContainer title=\"Hour\">{renderHours()}</WeatherContainer>;\r\n};\r\n\r\nexport default HourWeather;\r\n","import { FC } from 'react';\r\n\r\nimport { Box } from '@chakra-ui/layout';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nimport { ResponseDataType } from '../api/forecast';\r\nimport FutureWeather from './weather/FutureWeather';\r\nimport HourWeather from './weather/HourWeather';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport { transition } from '../constants/styles';\r\n\r\nexport const StyledSVG = styled.svg`\r\n  display: block;\r\n  left: 0;\r\n  transform: translateY(1px); // small fix on mobiles\r\n`;\r\n\r\ninterface SecondaryComponentProps {\r\n  height: number;\r\n  location: string;\r\n  setChangingLocation: React.Dispatch<React.SetStateAction<boolean>>;\r\n  forecast: ResponseDataType;\r\n}\r\n\r\nconst SecondaryComponent: FC<SecondaryComponentProps> = ({\r\n  height,\r\n  location,\r\n  setChangingLocation,\r\n  forecast,\r\n}): JSX.Element => {\r\n  const bgColor = useColorModeValue('#fff', '#171923'); // hexadecimal because of svg path\r\n\r\n  return (\r\n    <Box\r\n      transform={[\r\n        `translateY(${height}px)`,\r\n        `translateY(${height - 80}px)`,\r\n        `translateY(${height - 100}px)`,\r\n      ]}\r\n      onClick={() =>\r\n        location !== 'No location selected' && setChangingLocation(false)\r\n      }\r\n    >\r\n      <StyledSVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n        <path\r\n          fill={bgColor}\r\n          fillOpacity=\"1\"\r\n          style={{ transition }}\r\n          d=\"M0,192L48,186.7C96,181,192,171,288,181.3C384,192,480,224,576,213.3C672,203,768,149,864,149.3C960,149,1056,203,1152,208C1248,213,1344,171,1392,149.3L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n        ></path>\r\n      </StyledSVG>\r\n      <Box bgColor={bgColor} style={{ transition }}>\r\n        <HourWeather {...forecast.hourly} />\r\n        <FutureWeather {...forecast.daily} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SecondaryComponent;\r\n","import { extendTheme, ThemeConfig } from '@chakra-ui/react';\r\n\r\nconst config: ThemeConfig = {\r\n  initialColorMode: 'light',\r\n  useSystemColorMode: true,\r\n};\r\n\r\nconst theme = extendTheme({ config });\r\n\r\nexport default theme;\r\n","import { createContext, FC, useEffect, useState } from 'react';\r\n\r\nimport { ChakraProvider } from '@chakra-ui/react';\r\nimport { Center } from '@chakra-ui/layout';\r\nimport { Fade } from '@chakra-ui/transition';\r\nimport { Spinner } from '@chakra-ui/spinner';\r\n\r\nimport Geocode from 'react-geocode';\r\nimport { ParallaxProvider } from 'react-scroll-parallax';\r\n\r\nimport { getForecast, ResponseDataType } from '../api/forecast';\r\nimport Settings from './Settings';\r\nimport LocationSlider from './location/LocationSlider';\r\nimport MainComponent from './MainComponent';\r\nimport SecondaryComponent from './SecondaryComponent';\r\nimport theme from '../theme';\r\n\r\ninterface GeocodeResponseType {\r\n  results: {\r\n    address_components: {\r\n      long_name: string;\r\n      short_name: string;\r\n      types: string[];\r\n    }[];\r\n  }[];\r\n}\r\n\r\nexport const DegreeContext = createContext<{\r\n  degree: 'C' | 'F';\r\n  setDegree: React.Dispatch<React.SetStateAction<'C' | 'F'>>;\r\n}>({\r\n  degree: 'C',\r\n  setDegree: () => {},\r\n});\r\n\r\n// TODO:\r\n// FUTURECOMPONENT (DIVIDER JEST CZARNY I DODAC TEMPERATURE W NOCY)\r\n\r\nconst App: FC = (): JSX.Element => {\r\n  const [degree, setDegree] = useState<'C' | 'F'>('C');\r\n  const contextValue = { degree, setDegree };\r\n\r\n  const [location, setLocation] = useState('No location selected');\r\n  const [coords, setCoords] = useState({ lat: 0, lng: 0 });\r\n  const [changingLocation, setChangingLocation] = useState(true);\r\n  const [forecast, setForecast] = useState<ResponseDataType>();\r\n  const [loading, setLoading] = useState(false);\r\n  const [settingsShown, setSettingsShown] = useState(false);\r\n  const [height, setHeight] = useState(0);\r\n\r\n  const changeLocation = (): void => {\r\n    Geocode.fromLatLng(coords.lat.toString(), coords.lng.toString())\r\n      .then((response: GeocodeResponseType) => {\r\n        let city = '',\r\n          state = '',\r\n          country = '';\r\n\r\n        response.results[0].address_components.forEach(addressComponent => {\r\n          addressComponent.types.forEach(type => {\r\n            switch (type) {\r\n              case 'neighborhood':\r\n                city = addressComponent.long_name + ',';\r\n                break;\r\n              case 'postal_town':\r\n                city = addressComponent.long_name + ',';\r\n                break;\r\n              case 'sublocality':\r\n                city = addressComponent.long_name + ',';\r\n                break;\r\n              case 'locality':\r\n                city = addressComponent.long_name + ',';\r\n                break;\r\n              case 'administrative_area_level_1':\r\n                state = addressComponent.long_name + ',';\r\n                break;\r\n              case 'administrative_area_level_2':\r\n                state = addressComponent.long_name + ',';\r\n                break;\r\n              case 'country':\r\n                country = addressComponent.long_name;\r\n                break;\r\n            }\r\n          });\r\n        });\r\n        setLocation(`${city} ${state} ${country}`);\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  const fetchForecast = (): void => {\r\n    setLoading(true);\r\n    getForecast(coords).then(res => {\r\n      setForecast(res);\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    Geocode.setApiKey('AIzaSyAaNjFR_LN6izfmGEPx_1ZCYMkNfZhxSQs');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (coords.lat === 0 && coords.lng === 0) return;\r\n\r\n    changeLocation();\r\n    fetchForecast();\r\n    setChangingLocation(false);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [coords]);\r\n\r\n  return (\r\n    <ParallaxProvider>\r\n      <ChakraProvider theme={theme}>\r\n        <DegreeContext.Provider value={contextValue}>\r\n          <LocationSlider\r\n            changingLocation={changingLocation}\r\n            coords={coords}\r\n            setCoords={setCoords}\r\n            location={location}\r\n            setChangingLocation={setChangingLocation}\r\n          />\r\n\r\n          {forecast && (\r\n            <Settings\r\n              forecast={forecast.current}\r\n              setSettingsShown={setSettingsShown}\r\n              settingsShown={settingsShown}\r\n            />\r\n          )}\r\n\r\n          {loading ? (\r\n            <Center h=\"100vh\" w=\"100vw\">\r\n              <Spinner size=\"xl\" />\r\n            </Center>\r\n          ) : (\r\n            forecast && (\r\n              <Fade in={!loading} unmountOnExit>\r\n                <MainComponent\r\n                  forecast={forecast}\r\n                  location={location}\r\n                  setHeight={setHeight}\r\n                  setChangingLocation={setChangingLocation}\r\n                  setSettingsShown={setSettingsShown}\r\n                  fetchForecast={fetchForecast}\r\n                />\r\n                <SecondaryComponent\r\n                  height={height}\r\n                  setChangingLocation={setChangingLocation}\r\n                  location={location}\r\n                  forecast={forecast}\r\n                />\r\n              </Fade>\r\n            )\r\n          )}\r\n        </DegreeContext.Provider>\r\n      </ChakraProvider>\r\n    </ParallaxProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\n\r\nimport { ColorModeScript } from '@chakra-ui/color-mode';\r\n\r\nimport App from './components/App';\r\nimport theme from './theme';\r\n\r\nconst path = document.getElementById('root') as HTMLElement;\r\n\r\nReactDOM.render(\r\n  <>\r\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n    <App />\r\n  </>,\r\n  path\r\n);\r\n"],"sourceRoot":""}