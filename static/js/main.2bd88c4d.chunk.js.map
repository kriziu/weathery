{"version":3,"sources":["api/forecast.ts","utils/gradients.ts","components/Settings.tsx","components/location/Map.tsx","components/location/LocationSearch.tsx","styles/styles.ts","components/location/LocationSlider.tsx","utils/tempConverter.ts","utils/icons.tsx","components/weather/CurrentWeather.tsx","components/MainComponent.tsx","components/weather/DetailWeather.tsx","components/weather/WeatherContainer.tsx","components/weather/FutureWeather.tsx","components/weather/HourWeather.tsx","components/SecondaryComponent.tsx","theme.ts","components/App.tsx","index.tsx"],"names":["getForecast","coords","a","lat","lng","axios","get","params","lon","appid","process","result","weather","data","gradients","Settings","forecast","setSettingsShown","settingsShown","useContext","DegreeContext","degree","setDegree","isChecked","useColorModeValue","toggleColorMode","useColorMode","in","direction","style","zIndex","display","justifyContent","onClick","unmountOnExit","bgGradient","icon","color","w","height","px","pb","e","stopPropagation","position","right","top","variant","size","alignItems","mt","onChange","flexDirection","htmlFor","id","DefaultIcon","L","iconUrl","shadowUrl","iconShadow","Marker","prototype","options","timeout","LocationMarker","setCoords","useMapEvents","click","latlng","map","useMap","useEffect","setView","Map","geoCoords","navigator","geolocation","getCurrentPosition","longitude","latitude","h","MapContainer","center","zoom","TileLayer","attribution","url","borderRadius","transition","provider","OpenStreetMapProvider","LocationSearch","useState","inputValue","setInputValue","results","setResults","clearTimeout","setTimeout","search","query","then","res","placeholder","value","target","length","spacing","border","borderColor","p","index","_hover","cursor","backgroundColor","x","y","handleLocationClick","label","LocationSlider","changingLocation","setChangingLocation","locationName","bgColor","textAlign","pt","tempConverter","type","Math","round","icons","CurrentWeather","props","justify","mr","temp","orientation","opacity","main","feels_like","ml","transform","pop","toFixed","wind_speed","wind_deg","MainComponent","setHeight","fetchForecast","ref","useResizeObserver","onResize","toast","useToast","duration","render","bg","closeAll","current","width","daily","day","StyledSVG","styled","svg","DetailWeather","sunrise","Date","sunset","moonrise","moonset","styleOuter","marginTop","xmlns","viewBox","fill","fillOpacity","d","lg","getHours","getMinutes","py","columns","pressure","clouds","uvi","humidity","dew_point","morn","eve","night","WeatherContainer","children","title","margin","mb","md","overflowX","namesOfDays","FutureWeather","days","Object","values","selectedDay","setSelectedDay","isChanging","setIsChanging","dividerColor","date","dt","handleSelectedDayChange","my","fontSize","getDay","HourWeather","hours","hour","renderHours","SecondaryComponent","hourly","theme","extendTheme","config","initialColorMode","useSystemColorMode","createContext","App","contextValue","setLocationName","setForecast","loading","setLoading","address","village","city_district","city","town","municipality","county","Provider","path","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.2bd88c4d.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { ResponseDataType } from '../types/forecast';\r\n\r\nconst { REACT_APP_FORECAST_API_KEY } = process.env;\r\n\r\nexport const getForecast = async (coords: {\r\n  lat: number;\r\n  lng: number;\r\n}): Promise<ResponseDataType> => {\r\n  const { lat, lng } = coords;\r\n\r\n  const result = await axios.get(\r\n    `https://api.openweathermap.org/data/2.5/onecall`,\r\n    {\r\n      params: {\r\n        lat,\r\n        lon: lng,\r\n        appid: REACT_APP_FORECAST_API_KEY,\r\n      },\r\n    }\r\n  );\r\n\r\n  const weather: ResponseDataType = result.data;\r\n\r\n  return weather;\r\n};\r\n","export const gradients = {\r\n  '01d': 'linear(to-tr, yellow.300, red.500)',\r\n  '01n': 'linear(to-tr, gray.700, black)',\r\n  '02d': 'linear(to-tr, gray.400, gray.500)',\r\n  '02n': 'linear(to-tr, gray.700, black)',\r\n  '03d': 'linear(to-tr, gray.500, gray.600)',\r\n  '03n': 'linear(to-tr, gray.700, black)',\r\n  '04d': 'linear(to-tr, gray.500, gray.700)',\r\n  '04n': 'linear(to-tr, gray.700, black)',\r\n  '09d': 'linear(to-tr, blue.600, gray.600)',\r\n  '09n': 'linear(to-tr, gray.700, black)',\r\n  '10d': 'linear(to-tr, blue.600, gray.600)',\r\n  '10n': 'linear(to-tr, gray.700, black)',\r\n  '11d': 'linear(to-tr, blue.700, gray.700)',\r\n  '11n': 'linear(to-tr, gray.700, black)',\r\n  '13d': 'linear(to-tr, blue.300, blue.50)',\r\n  '13n': 'linear(to-tr, gray.700, black)',\r\n  '50d': 'linear(to-tr, gray.400, gray.500)',\r\n  '50n': 'linear(to-tr, gray.700, black)',\r\n};\r\n","import { FC, useContext } from 'react';\r\n\r\nimport { IconButton } from '@chakra-ui/button';\r\nimport { FormLabel } from '@chakra-ui/form-control';\r\nimport { Box, Flex, Heading } from '@chakra-ui/layout';\r\nimport { Switch } from '@chakra-ui/switch';\r\nimport { Slide } from '@chakra-ui/transition';\r\nimport { useColorMode, useColorModeValue } from '@chakra-ui/color-mode';\r\n\r\nimport { IoClose } from 'react-icons/io5';\r\n\r\nimport { WeatherType } from '../types/forecast';\r\nimport { gradients } from '../utils/gradients';\r\nimport { DegreeContext } from './App';\r\n\r\ninterface SettingsProps {\r\n  forecast: WeatherType;\r\n  settingsShown: boolean;\r\n  setSettingsShown: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst Settings: FC<SettingsProps> = ({\r\n  forecast,\r\n  setSettingsShown,\r\n  settingsShown,\r\n}): JSX.Element => {\r\n  const { degree, setDegree } = useContext(DegreeContext);\r\n  const isChecked = useColorModeValue(false, true);\r\n  const { toggleColorMode } = useColorMode();\r\n\r\n  return (\r\n    <Slide\r\n      in={settingsShown}\r\n      direction=\"right\"\r\n      style={{ zIndex: 5, display: 'flex', justifyContent: 'flex-end' }}\r\n      onClick={() => setSettingsShown(false)}\r\n      unmountOnExit\r\n    >\r\n      <Box\r\n        bgGradient={gradients[forecast.weather[0].icon]}\r\n        color={forecast.weather[0].icon[2] === 'n' ? 'gray.500' : ''}\r\n        w=\"3xs\"\r\n        height=\"full\"\r\n        px={5}\r\n        pb={40}\r\n        onClick={e => e.stopPropagation()}\r\n      >\r\n        <IconButton\r\n          position=\"absolute\"\r\n          right={[4, 6, 8, 10]}\r\n          top={[4, 6, 8, 10]}\r\n          zIndex={10}\r\n          aria-label=\"settings\"\r\n          variant=\"ghost\"\r\n          onClick={() => setSettingsShown(false)}\r\n          icon={<IoClose size={38} />}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-around\" mt={24} px={6}>\r\n          <Heading>C</Heading>\r\n          <Switch\r\n            size=\"lg\"\r\n            aria-label=\"Change to Fahrenheit\"\r\n            onChange={() => setDegree(degree === 'C' ? 'F' : 'C')}\r\n          />\r\n          <Heading>F</Heading>\r\n        </Flex>\r\n\r\n        <Flex\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n          justifyContent=\"center\"\r\n          mt={6}\r\n        >\r\n          <FormLabel htmlFor=\"dark\">\r\n            <Heading size=\"md\">Dark mode</Heading>\r\n          </FormLabel>\r\n          <Switch\r\n            size=\"lg\"\r\n            aria-label=\"Dark mode\"\r\n            id=\"dark\"\r\n            isChecked={isChecked}\r\n            onChange={toggleColorMode}\r\n          />\r\n        </Flex>\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import { FC, useEffect } from 'react';\r\n\r\nimport { Box } from '@chakra-ui/layout';\r\n\r\nimport {\r\n  MapContainer,\r\n  Marker,\r\n  TileLayer,\r\n  useMap,\r\n  useMapEvents,\r\n} from 'react-leaflet';\r\n\r\nimport 'leaflet/dist/leaflet.css';\r\n\r\nimport L from 'leaflet';\r\nimport icon from 'leaflet/dist/images/marker-icon.png';\r\nimport iconShadow from 'leaflet/dist/images/marker-shadow.png';\r\n\r\nlet DefaultIcon = L.icon({\r\n  iconUrl: icon,\r\n  shadowUrl: iconShadow,\r\n});\r\n\r\nL.Marker.prototype.options.icon = DefaultIcon;\r\n\r\ninterface Props {\r\n  coords: { lat: number; lng: number };\r\n  setCoords: React.Dispatch<\r\n    React.SetStateAction<{\r\n      lat: number;\r\n      lng: number;\r\n    }>\r\n  >;\r\n}\r\n\r\nconst LocationMarker = ({ coords, setCoords }: Props) => {\r\n  useMapEvents({\r\n    click(e) {\r\n      setCoords(e.latlng);\r\n    },\r\n  });\r\n\r\n  const map = useMap();\r\n\r\n  useEffect(() => {\r\n    map.setView(coords);\r\n  }, [coords, map]);\r\n\r\n  return coords === null ? null : <Marker position={coords} />;\r\n};\r\n\r\nconst Map: FC<Props> = ({ coords, setCoords }) => {\r\n  let geoCoords = coords;\r\n\r\n  if (coords.lat === 0 && coords.lng === 0) {\r\n    navigator.geolocation.getCurrentPosition(e => {\r\n      const { longitude, latitude } = e.coords;\r\n\r\n      setCoords({ lat: latitude, lng: longitude });\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Box h={500}>\r\n      <MapContainer center={geoCoords} zoom={13} style={{ height: '95%' }}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        <LocationMarker coords={coords} setCoords={setCoords} />\r\n      </MapContainer>\r\n    </Box>\r\n  );\r\n};\r\nexport default Map;\r\n","import {\r\n  Box,\r\n  Center,\r\n  Collapse,\r\n  Input,\r\n  List,\r\n  ListItem,\r\n  Spinner,\r\n} from '@chakra-ui/react';\r\nimport { OpenStreetMapProvider } from 'leaflet-geosearch';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { borderWidth } from '../../styles/styles';\r\n\r\nconst provider = new OpenStreetMapProvider();\r\n\r\nlet timeout: NodeJS.Timeout;\r\n\r\ninterface Props {\r\n  setCoords: React.Dispatch<\r\n    React.SetStateAction<{\r\n      lat: number;\r\n      lng: number;\r\n    }>\r\n  >;\r\n}\r\n\r\ninterface ResultType {\r\n  x: number;\r\n  y: number;\r\n  label: string;\r\n}\r\n\r\nconst LocationSearch = ({ setCoords }: Props) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [results, setResults] = useState<ResultType[]>([]);\r\n\r\n  useEffect(() => {\r\n    clearTimeout(timeout);\r\n\r\n    timeout = setTimeout(() => {\r\n      inputValue &&\r\n        provider.search({ query: inputValue }).then(res => setResults(res));\r\n    }, 500);\r\n\r\n    !inputValue && setResults([]);\r\n  }, [inputValue, setCoords]);\r\n\r\n  const handleLocationClick = (index: number) => {\r\n    setCoords({ lng: results[index].x, lat: results[index].y });\r\n    setInputValue('');\r\n  };\r\n\r\n  return (\r\n    <Box px={[5, 10]} position=\"relative\" mt={5}>\r\n      <Input\r\n        placeholder=\"Search location\"\r\n        value={inputValue}\r\n        onChange={e => setInputValue(e.target.value)}\r\n      />\r\n\r\n      <Collapse in={false} unmountOnExit>\r\n        <Center mt={4}>\r\n          <Spinner />\r\n        </Center>\r\n      </Collapse>\r\n\r\n      <Collapse in={true} unmountOnExit>\r\n        {results.length !== 0 && (\r\n          <List\r\n            zIndex={100}\r\n            w=\"100%\"\r\n            spacing={2}\r\n            border={borderWidth}\r\n            borderColor=\"gray.200\"\r\n            p={2}\r\n            borderRadius={4}\r\n          >\r\n            {results.map((result, index) => {\r\n              return (\r\n                <ListItem\r\n                  key={index}\r\n                  _hover={{\r\n                    cursor: 'pointer',\r\n                    backgroundColor: 'gray.200',\r\n                    color: 'black',\r\n                  }}\r\n                  onClick={() => handleLocationClick(index)}\r\n                >\r\n                  {result.label}\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n        )}\r\n      </Collapse>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LocationSearch;\r\n","export const borderRadius = '.5rem';\r\nexport const borderWidth = '1px';\r\nexport const transition = 'all .2s ease';\r\n","import { FC } from 'react';\r\n\r\nimport { Box, Heading } from '@chakra-ui/layout';\r\nimport { Slide } from '@chakra-ui/transition';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport 'leaflet-geosearch/dist/geosearch.css';\r\n\r\nimport Map from './Map';\r\nimport LocationSearch from './LocationSearch';\r\n\r\ninterface LocationSliderProps {\r\n  changingLocation: boolean;\r\n  coords: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  setCoords: React.Dispatch<\r\n    React.SetStateAction<{\r\n      lat: number;\r\n      lng: number;\r\n    }>\r\n  >;\r\n  setChangingLocation: React.Dispatch<React.SetStateAction<boolean>>;\r\n  locationName: string;\r\n}\r\n\r\nconst LocationSlider: FC<LocationSliderProps> = ({\r\n  changingLocation,\r\n  coords,\r\n  setCoords,\r\n  setChangingLocation,\r\n  locationName,\r\n}): JSX.Element => {\r\n  const bgColor = useColorModeValue('white', 'gray.800');\r\n  return (\r\n    <Slide in={changingLocation} direction=\"top\" style={{ zIndex: 5 }}>\r\n      <Box bgColor={bgColor} w=\"full\" height=\"full\" px={5} pb={40}>\r\n        <Heading\r\n          size=\"xl\"\r\n          textAlign=\"center\"\r\n          pt={5}\r\n          cursor=\"pointer\"\r\n          onClick={() => setChangingLocation(false)}\r\n        >\r\n          {locationName}\r\n        </Heading>\r\n        <LocationSearch setCoords={setCoords} />\r\n        <Box p={[5, 10]} height=\"sm\">\r\n          <Map coords={coords} setCoords={setCoords} />\r\n        </Box>\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default LocationSlider;\r\n","export const tempConverter = (type: 'C' | 'F', value: number): number => {\r\n  return type === 'C'\r\n    ? Math.round(value - 273.15)\r\n    : Math.round(((value - 273.15) * 9) / 5 + 32);\r\n};\r\n","import {\r\n  WiCloud,\r\n  WiCloudy,\r\n  WiDayCloudy,\r\n  WiDayRain,\r\n  WiDaySunny,\r\n  WiFog,\r\n  WiNightClear,\r\n  WiNightCloudy,\r\n  WiNightRain,\r\n  WiRain,\r\n  WiSnow,\r\n  WiThunderstorm,\r\n} from 'react-icons/wi';\r\n\r\nexport const icons = {\r\n  '01d': <WiDaySunny size=\"100%\" />,\r\n  '01n': <WiNightClear size=\"100%\" />,\r\n  '02d': <WiDayCloudy size=\"100%\" />,\r\n  '02n': <WiNightCloudy size=\"100%\" />,\r\n  '03d': <WiCloud size=\"100%\" />,\r\n  '03n': <WiCloud size=\"100%\" />,\r\n  '04d': <WiCloudy size=\"100%\" />,\r\n  '04n': <WiCloudy size=\"100%\" />,\r\n  '09d': <WiRain size=\"100%\" />,\r\n  '09n': <WiRain size=\"100%\" />,\r\n  '10d': <WiDayRain size=\"100%\" />,\r\n  '10n': <WiNightRain size=\"100%\" />,\r\n  '11d': <WiThunderstorm size=\"100%\" />,\r\n  '11n': <WiThunderstorm size=\"100%\" />,\r\n  '13d': <WiSnow size=\"100%\" />,\r\n  '13n': <WiSnow size=\"100%\" />,\r\n  '50d': <WiFog size=\"100%\" />,\r\n  '50n': <WiFog size=\"100%\" />,\r\n};\r\n","import { FC, useContext } from 'react';\r\n\r\nimport { Box, Flex, Heading, HStack } from '@chakra-ui/layout';\r\nimport { Stat, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Divider } from '@chakra-ui/react';\r\n\r\nimport { TiLocationArrow } from 'react-icons/ti';\r\n\r\nimport { WeatherType } from '../../types/forecast';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { icons } from '../../utils/icons';\r\n\r\ninterface CurrentWeatherType extends WeatherType {\r\n  feels_like: number;\r\n  pop: number;\r\n}\r\n\r\nconst CurrentWeather: FC<CurrentWeatherType> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n\r\n  return (\r\n    <Box px={[5, 10]}>\r\n      <Box>\r\n        <Flex justify=\"center\" alignItems=\"center\">\r\n          <HStack height={16} alignItems=\"center\" spacing={2} mr={[2, 10]}>\r\n            <Heading size=\"4xl\">{tempConverter(degree, props.temp)}°</Heading>\r\n            <Divider orientation=\"vertical\" borderColor=\"black\" opacity={0.2} />\r\n            <Heading size=\"lg\">{props.weather[0].main}</Heading>\r\n          </HStack>\r\n          <Box w={24} h={24}>\r\n            {icons[props.weather[0].icon]}\r\n          </Box>\r\n        </Flex>\r\n        <Heading size=\"md\" textAlign=\"center\" mt={3}>\r\n          Feels like {tempConverter(degree, props.feels_like)}°\r\n        </Heading>\r\n      </Box>\r\n      <Flex mt={5} w={[200, 200, 300]} ml=\"50%\" transform=\"translateX(-50%)\">\r\n        <Stat textAlign=\"center\">\r\n          <StatLabel>Precipitation</StatLabel>\r\n          <StatNumber>{(props.pop * 100).toFixed(0)}%</StatNumber>\r\n        </Stat>\r\n        <Stat textAlign=\"center\">\r\n          <StatLabel>Wind</StatLabel>\r\n          <StatNumber>\r\n            <Flex\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              flexDirection=\"column\"\r\n            >\r\n              {props.wind_speed} m/s\r\n              <Box transform={`rotate(${props.wind_deg - 45}deg)`}>\r\n                <TiLocationArrow size={32} />\r\n              </Box>\r\n            </Flex>\r\n          </StatNumber>\r\n        </Stat>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","import { FC, useEffect } from 'react';\r\n\r\nimport { IconButton } from '@chakra-ui/button';\r\nimport { Box, Heading } from '@chakra-ui/layout';\r\nimport { useToast } from '@chakra-ui/toast';\r\n\r\nimport { IoSettingsOutline } from 'react-icons/io5';\r\nimport useResizeObserver from 'use-resize-observer';\r\n\r\nimport { gradients } from '../utils/gradients';\r\nimport CurrentWeather from './weather/CurrentWeather';\r\nimport { borderRadius } from '../styles/styles';\r\nimport { ResponseDataType } from '../types/forecast';\r\n\r\ninterface MainComponentProps {\r\n  forecast: ResponseDataType;\r\n  setChangingLocation: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setSettingsShown: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setHeight: React.Dispatch<React.SetStateAction<number>>;\r\n  coords: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  locationName: string;\r\n  fetchForecast: () => void;\r\n}\r\n\r\nconst MainComponent: FC<MainComponentProps> = ({\r\n  forecast,\r\n  setChangingLocation,\r\n  setSettingsShown,\r\n  setHeight,\r\n  coords,\r\n  locationName,\r\n  fetchForecast,\r\n}): JSX.Element => {\r\n  const { ref } = useResizeObserver({\r\n    onResize: e => {\r\n      e.height && setHeight(e.height);\r\n    },\r\n  });\r\n\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    setTimeout(\r\n      () =>\r\n        toast({\r\n          duration: null,\r\n          render: () => (\r\n            <Box\r\n              color=\"white\"\r\n              p={3}\r\n              bg=\"blue.300\"\r\n              borderRadius={borderRadius}\r\n              px={5}\r\n              onClick={() => {\r\n                fetchForecast();\r\n                toast.closeAll();\r\n              }}\r\n            >\r\n              <Heading size=\"sm\">Click to update wether</Heading>\r\n            </Box>\r\n          ),\r\n        }),\r\n      3600000\r\n    );\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      bgGradient={\r\n        forecast\r\n          ? gradients[forecast.current.weather[0].icon]\r\n          : gradients['03d']\r\n      }\r\n      position=\"fixed\"\r\n      width=\"full\"\r\n      ref={ref}\r\n      top={0}\r\n      color={\r\n        forecast && forecast.current.weather[0].icon[2] === 'n'\r\n          ? 'gray.500'\r\n          : 'gray.800'\r\n      }\r\n      pb={[100, 200, 300, 400]}\r\n    >\r\n      <Box p={[5, 10]} position=\"relative\" pb={0}>\r\n        <Heading\r\n          size=\"xl\"\r\n          textAlign=\"center\"\r\n          cursor=\"pointer\"\r\n          mt={12}\r\n          onClick={() => setChangingLocation(true)}\r\n        >\r\n          {locationName}\r\n        </Heading>\r\n\r\n        <IconButton\r\n          position=\"absolute\"\r\n          right={[4, 6, 8, 10]}\r\n          top={[4, 6, 8, 10]}\r\n          zIndex={5}\r\n          aria-label=\"settings\"\r\n          variant=\"ghost\"\r\n          onClick={() => setSettingsShown(true)}\r\n          icon={<IoSettingsOutline size={38} />}\r\n        />\r\n\r\n        <CurrentWeather\r\n          {...forecast.current}\r\n          feels_like={forecast.daily[0].feels_like.day}\r\n          pop={forecast.daily[0].pop}\r\n        />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MainComponent;\r\n","import { FC, useContext } from 'react';\r\n\r\nimport { Box, Center, Flex, Heading, SimpleGrid } from '@chakra-ui/layout';\r\nimport { Stat, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Divider } from '@chakra-ui/react';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\n\r\nimport { FiSunrise, FiSunset } from 'react-icons/fi';\r\nimport { TiLocationArrow } from 'react-icons/ti';\r\nimport { WiMoonrise, WiMoonset } from 'react-icons/wi';\r\nimport styled from '@emotion/styled';\r\nimport { Parallax } from 'react-scroll-parallax';\r\n\r\nimport { FutureWeatherType } from '../../types/forecast';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { gradients } from '../../utils/gradients';\r\nimport { transition } from '../../styles/styles';\r\n\r\nconst StyledSVG = styled.svg`\r\n  display: block;\r\n  left: 0;\r\n  transform: rotate(180deg) translateY(1px);\r\n`;\r\n\r\nconst DetailWeather: FC<FutureWeatherType> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n  const sunrise = new Date(props.sunrise * 1000);\r\n  const sunset = new Date(props.sunset * 1000);\r\n  const moonrise = new Date(props.moonrise * 1000);\r\n  const moonset = new Date(props.moonset * 1000);\r\n\r\n  const bgColor = useColorModeValue('#fff', '#171923');\r\n\r\n  return (\r\n    <Parallax y={[20, 0]} styleOuter={{ marginTop: '-3rem' }}>\r\n      <Box\r\n        bgGradient={gradients[props.weather[0].icon]}\r\n        pb={10}\r\n        color=\"gray.800\"\r\n      >\r\n        <StyledSVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n          <path\r\n            fill={bgColor}\r\n            style={{ transition }}\r\n            fillOpacity=\"1\"\r\n            d=\"M0,128L48,133.3C96,139,192,149,288,144C384,139,480,117,576,106.7C672,96,768,96,864,112C960,128,1056,160,1152,170.7C1248,181,1344,171,1392,165.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n          ></path>\r\n        </StyledSVG>\r\n        <Heading size=\"xl\" textAlign=\"center\" mt={-2}>\r\n          Details\r\n        </Heading>\r\n\r\n        <Box\r\n          w={{ lg: 350 }}\r\n          ml={{ lg: '50%' }}\r\n          transform={{ lg: 'translateX(-50%)' }}\r\n        >\r\n          <Flex mt={5} px={['10vw', '20vw', '30vw', 0]}>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <FiSunrise size={24} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {sunrise.getHours()}:\r\n                {sunrise.getMinutes() < 10\r\n                  ? '0' + sunrise.getMinutes()\r\n                  : sunrise.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <FiSunset size={24} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {sunset.getHours()}:\r\n                {sunset.getMinutes() < 10\r\n                  ? '0' + sunset.getMinutes()\r\n                  : sunset.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n          </Flex>\r\n          <Center>\r\n            <Divider borderColor=\"black\" opacity={0.1} w={64} py={2} />\r\n          </Center>\r\n\r\n          <SimpleGrid\r\n            mt={5}\r\n            px={['10vw', '20vw', '30vw', 0]}\r\n            columns={3}\r\n            spacing={2}\r\n          >\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Pressure</StatLabel>\r\n              <StatNumber>{props.pressure}</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Rain</StatLabel>\r\n              <StatNumber>{(props.pop * 100).toFixed()}%</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Clouds</StatLabel>\r\n              <StatNumber>{props.clouds}%</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>UV</StatLabel>\r\n              <StatNumber>{props.uvi}</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Humidity</StatLabel>\r\n              <StatNumber>{props.humidity}%</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Dew point</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.dew_point)}°</StatNumber>\r\n            </Stat>\r\n          </SimpleGrid>\r\n          <Center>\r\n            <Divider borderColor=\"black\" opacity={0.1} w={64} py={2} />\r\n          </Center>\r\n          <Heading size=\"md\" textAlign=\"center\" mt={5}>\r\n            Temperature\r\n          </Heading>\r\n          <Flex px={['10vw', '20vw', '30vw', 0]} mt={2}>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Morning</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.temp.morn)}°</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Day</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.temp.day)}°</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Evening</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.temp.eve)}°</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Night</StatLabel>\r\n              <StatNumber>\r\n                {tempConverter(degree, props.temp.night)}°\r\n              </StatNumber>\r\n            </Stat>\r\n          </Flex>\r\n\r\n          <Stat textAlign=\"center\">\r\n            <StatLabel>\r\n              <Heading size=\"sm\" textAlign=\"center\" mt={5}>\r\n                Wind\r\n              </Heading>\r\n            </StatLabel>\r\n            <StatNumber>\r\n              <Flex\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                flexDirection=\"column\"\r\n              >\r\n                {props.wind_speed} m/s\r\n                <Box transform={`rotate(${props.wind_deg - 45}deg)`}>\r\n                  <TiLocationArrow size={32} />\r\n                </Box>\r\n              </Flex>\r\n            </StatNumber>\r\n          </Stat>\r\n\r\n          <Flex mt={5} px={['10vw', '20vw', '30vw', 0]}>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <WiMoonrise size={34} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {moonrise.getHours()}:\r\n                {moonrise.getMinutes() < 10\r\n                  ? '0' + moonrise.getMinutes()\r\n                  : moonrise.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <WiMoonset size={34} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {moonset.getHours()}:\r\n                {moonset.getMinutes() < 10\r\n                  ? '0' + moonset.getMinutes()\r\n                  : moonset.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Parallax>\r\n  );\r\n};\r\n\r\nexport default DetailWeather;\r\n","import { FC } from 'react';\r\n\r\nimport { Box, Heading, HStack } from '@chakra-ui/layout';\r\n\r\nconst WeatherContainer: FC<{ title: string; margin?: number }> = ({\r\n  children,\r\n  title,\r\n  margin = 14,\r\n}): JSX.Element => {\r\n  return (\r\n    <Box\r\n      mb={margin}\r\n      w={{ md: 500, lg: 750 }}\r\n      ml={{ md: '50%' }}\r\n      transform={{ md: 'translateX(-50%)' }}\r\n      px={[5, 10]}\r\n      position=\"relative\"\r\n      zIndex={1}\r\n    >\r\n      <Heading mb={4}>{title}</Heading>\r\n      <HStack spacing={6} overflowX=\"scroll\" px={2} pb={4}>\r\n        {children}\r\n      </HStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WeatherContainer;\r\n","import { FC, useContext, Fragment, useState } from 'react';\r\n\r\nimport { Box, Flex } from '@chakra-ui/layout';\r\nimport { Stat, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Divider } from '@chakra-ui/react';\r\nimport { SlideFade } from '@chakra-ui/transition';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\n\r\nimport DetailWeather from './DetailWeather';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { FutureWeatherType } from '../../types/forecast';\r\nimport { icons } from '../../utils/icons';\r\nimport WeatherContainer from './WeatherContainer';\r\nimport { borderRadius } from '../../styles/styles';\r\n\r\nconst namesOfDays = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n];\r\n\r\nconst FutureWeather: FC<FutureWeatherType[]> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n  const days = Object.values(props);\r\n\r\n  const [selectedDay, setSelectedDay] = useState(0);\r\n  const [isChanging, setIsChanging] = useState(false);\r\n  const bgColor = useColorModeValue('gray.100', 'gray.700');\r\n  const dividerColor = useColorModeValue('gray.700', 'gray.100');\r\n\r\n  const handleSelectedDayChange = (index: number): void => {\r\n    setIsChanging(true);\r\n\r\n    setTimeout(() => {\r\n      setSelectedDay(index);\r\n      setIsChanging(false);\r\n    }, 200);\r\n  };\r\n\r\n  const renderDays = (): JSX.Element[] => {\r\n    return days.map((day, index) => {\r\n      const date = new Date(day.dt * 1000);\r\n\r\n      return (\r\n        <Fragment key={index}>\r\n          <Flex\r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            p={4}\r\n            bgColor={index === selectedDay ? bgColor : 'transparent'}\r\n            borderRadius={borderRadius}\r\n            cursor=\"pointer\"\r\n            onClick={() => handleSelectedDayChange(index)}\r\n            transition=\"all .2s\"\r\n          >\r\n            <Box w={12} h={12}>\r\n              {icons[day.weather[0].icon]}\r\n            </Box>\r\n\r\n            <Divider borderColor={dividerColor} opacity={0.1} my={2} />\r\n            <Stat textAlign=\"center\">\r\n              <StatNumber>{tempConverter(degree, day.temp.day)}°</StatNumber>\r\n              <StatNumber fontSize=\"md\">\r\n                {tempConverter(degree, day.temp.night)}°\r\n              </StatNumber>\r\n              <StatLabel>\r\n                {index === 0 ? 'Today' : namesOfDays[date.getDay()]}\r\n              </StatLabel>\r\n            </Stat>\r\n          </Flex>\r\n          {index !== days.length - 1 && (\r\n            <Divider\r\n              orientation=\"vertical\"\r\n              height={20}\r\n              borderColor={dividerColor}\r\n              opacity={0.1}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <WeatherContainer title=\"Forecast\" margin={-6}>\r\n        {renderDays()}\r\n      </WeatherContainer>\r\n      <SlideFade in={!isChanging}>\r\n        <DetailWeather {...days[selectedDay]} />\r\n      </SlideFade>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FutureWeather;\r\n","import { FC, useContext, Fragment } from 'react';\r\n\r\nimport { Flex } from '@chakra-ui/layout';\r\nimport { Stat, StatHelpText, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Center, Divider } from '@chakra-ui/react';\r\nimport { Text } from '@chakra-ui/layout';\r\n\r\nimport { WiRaindrop } from 'react-icons/wi';\r\n\r\nimport { HourlyWeatherType } from '../../types/forecast';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { icons } from '../../utils/icons';\r\nimport WeatherContainer from './WeatherContainer';\r\n\r\nconst HourWeather: FC<HourlyWeatherType[]> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n\r\n  const renderHours = (): JSX.Element[] => {\r\n    const hours = Object.values(props);\r\n\r\n    return hours.map((hour, index) => {\r\n      const date = new Date(hour.dt * 1000);\r\n\r\n      return (\r\n        <Fragment key={index}>\r\n          <Stat textAlign=\"center\">\r\n            <StatLabel fontSize=\"lg\">{date.getHours()}:00</StatLabel>\r\n            <Center w={12} h={12}>\r\n              {icons[hour.weather[0].icon]}\r\n            </Center>\r\n            <StatNumber>{tempConverter(degree, hour.temp)}°</StatNumber>\r\n            <StatHelpText ml={-4}>\r\n              <Center>\r\n                <Flex alignItems=\"center\">\r\n                  <WiRaindrop size={40} />\r\n                  <Text ml={-2}>{(hour.pop * 100).toFixed(0)}%</Text>\r\n                </Flex>\r\n              </Center>\r\n            </StatHelpText>\r\n          </Stat>\r\n          {index !== hours.length - 1 && (\r\n            <Divider\r\n              orientation=\"vertical\"\r\n              height={20}\r\n              borderColor=\"black\"\r\n              opacity={0.1}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      );\r\n    });\r\n  };\r\n\r\n  return <WeatherContainer title=\"Hour\">{renderHours()}</WeatherContainer>;\r\n};\r\n\r\nexport default HourWeather;\r\n","import { FC } from 'react';\r\n\r\nimport { Box } from '@chakra-ui/layout';\r\n\r\nimport styled from '@emotion/styled';\r\n\r\nimport FutureWeather from './weather/FutureWeather';\r\nimport HourWeather from './weather/HourWeather';\r\nimport { useColorModeValue } from '@chakra-ui/color-mode';\r\nimport { transition } from '../styles/styles';\r\nimport { ResponseDataType } from '../types/forecast';\r\n\r\nexport const StyledSVG = styled.svg`\r\n  display: block;\r\n  left: 0;\r\n  transform: translateY(1px); // small fix on mobiles\r\n`;\r\n\r\ninterface SecondaryComponentProps {\r\n  height: number;\r\n  setChangingLocation: React.Dispatch<React.SetStateAction<boolean>>;\r\n  forecast: ResponseDataType;\r\n}\r\n\r\nconst SecondaryComponent: FC<SecondaryComponentProps> = ({\r\n  height,\r\n  setChangingLocation,\r\n  forecast,\r\n}): JSX.Element => {\r\n  const bgColor = useColorModeValue('#fff', '#171923'); // hexadecimal because of svg path\r\n\r\n  return (\r\n    <Box\r\n      transform={[\r\n        `translateY(${height}px)`,\r\n        `translateY(${height - 80}px)`,\r\n        `translateY(${height - 100}px)`,\r\n      ]}\r\n      onClick={() => setChangingLocation(false)}\r\n    >\r\n      <StyledSVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n        <path\r\n          fill={bgColor}\r\n          fillOpacity=\"1\"\r\n          style={{ transition }}\r\n          d=\"M0,192L48,186.7C96,181,192,171,288,181.3C384,192,480,224,576,213.3C672,203,768,149,864,149.3C960,149,1056,203,1152,208C1248,213,1344,171,1392,149.3L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n        ></path>\r\n      </StyledSVG>\r\n      <Box bgColor={bgColor} style={{ transition }}>\r\n        <HourWeather {...forecast.hourly} />\r\n        <FutureWeather {...forecast.daily} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default SecondaryComponent;\r\n","import { extendTheme, ThemeConfig } from '@chakra-ui/react';\r\n\r\nconst config: ThemeConfig = {\r\n  initialColorMode: 'light',\r\n  useSystemColorMode: false,\r\n};\r\n\r\nconst theme = extendTheme({ config });\r\n\r\nexport default theme;\r\n","import { createContext, FC, useEffect, useState } from 'react';\r\n\r\nimport { ChakraProvider } from '@chakra-ui/react';\r\nimport { Center } from '@chakra-ui/layout';\r\nimport { Fade } from '@chakra-ui/transition';\r\nimport { Spinner } from '@chakra-ui/spinner';\r\n\r\nimport { ParallaxProvider } from 'react-scroll-parallax';\r\n\r\nimport { getForecast } from '../api/forecast';\r\nimport Settings from './Settings';\r\nimport LocationSlider from './location/LocationSlider';\r\nimport MainComponent from './MainComponent';\r\nimport SecondaryComponent from './SecondaryComponent';\r\nimport theme from '../theme';\r\nimport { ResponseDataType } from '../types/forecast';\r\nimport axios from 'axios';\r\n\r\nexport const DegreeContext = createContext<{\r\n  degree: 'C' | 'F';\r\n  setDegree: React.Dispatch<React.SetStateAction<'C' | 'F'>>;\r\n}>({\r\n  degree: 'C',\r\n  setDegree: () => {},\r\n});\r\n\r\nconst App: FC = (): JSX.Element => {\r\n  const [degree, setDegree] = useState<'C' | 'F'>('C');\r\n  const contextValue = { degree, setDegree };\r\n\r\n  const [locationName, setLocationName] = useState('No location selected...');\r\n  const [coords, setCoords] = useState({ lat: 0, lng: 0 });\r\n  const [changingLocation, setChangingLocation] = useState(true);\r\n  const [forecast, setForecast] = useState<ResponseDataType>();\r\n  const [loading, setLoading] = useState(false);\r\n  const [settingsShown, setSettingsShown] = useState(false);\r\n  const [height, setHeight] = useState(0);\r\n\r\n  const fetchForecast = (): void => {\r\n    setLoading(true);\r\n    getForecast(coords).then(res => {\r\n      setForecast(res);\r\n      setLoading(false);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (coords.lat === 0 && coords.lng === 0) return;\r\n\r\n    fetchForecast();\r\n    setChangingLocation(false);\r\n\r\n    axios\r\n      .get<{\r\n        address: {\r\n          city_district?: string;\r\n          village?: string;\r\n          city?: string;\r\n          town?: string;\r\n          municipality?: string;\r\n          county?: string;\r\n        };\r\n      }>(\r\n        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${coords.lat}&lon=${coords.lng}&zoom=18&addressdetails=1`\r\n      )\r\n      .then(res => {\r\n        const { address } = res.data;\r\n\r\n        if (address.village) {\r\n          setLocationName(address.village);\r\n          return;\r\n        }\r\n\r\n        if (address.city_district) {\r\n          setLocationName(address.city_district);\r\n          return;\r\n        }\r\n\r\n        if (address.city) {\r\n          setLocationName(address.city);\r\n          return;\r\n        }\r\n\r\n        if (address.town) {\r\n          setLocationName(address.town);\r\n          return;\r\n        }\r\n\r\n        if (address.municipality) {\r\n          setLocationName(address.municipality);\r\n          return;\r\n        }\r\n\r\n        if (address.county) {\r\n          setLocationName(address.county);\r\n          return;\r\n        }\r\n      });\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [coords]);\r\n\r\n  return (\r\n    <ParallaxProvider>\r\n      <ChakraProvider theme={theme}>\r\n        <DegreeContext.Provider value={contextValue}>\r\n          <LocationSlider\r\n            changingLocation={changingLocation}\r\n            coords={coords}\r\n            setCoords={setCoords}\r\n            setChangingLocation={setChangingLocation}\r\n            locationName={locationName}\r\n          />\r\n\r\n          {forecast && (\r\n            <Settings\r\n              forecast={forecast.current}\r\n              setSettingsShown={setSettingsShown}\r\n              settingsShown={settingsShown}\r\n            />\r\n          )}\r\n\r\n          {loading ? (\r\n            <Center h=\"100vh\" w=\"100vw\">\r\n              <Spinner size=\"xl\" />\r\n            </Center>\r\n          ) : (\r\n            forecast && (\r\n              <Fade in={!loading} unmountOnExit>\r\n                <MainComponent\r\n                  forecast={forecast}\r\n                  setHeight={setHeight}\r\n                  coords={coords}\r\n                  setChangingLocation={setChangingLocation}\r\n                  setSettingsShown={setSettingsShown}\r\n                  fetchForecast={fetchForecast}\r\n                  locationName={locationName}\r\n                />\r\n                <SecondaryComponent\r\n                  height={height}\r\n                  setChangingLocation={setChangingLocation}\r\n                  forecast={forecast}\r\n                />\r\n              </Fade>\r\n            )\r\n          )}\r\n        </DegreeContext.Provider>\r\n      </ChakraProvider>\r\n    </ParallaxProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\n\r\nimport { ColorModeScript } from '@chakra-ui/color-mode';\r\n\r\nimport App from './components/App';\r\nimport theme from './theme';\r\n\r\nconst path = document.getElementById('root') as HTMLElement;\r\n\r\nReactDOM.render(\r\n  <>\r\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\r\n    <App />\r\n  </>,\r\n  path\r\n);\r\n"],"sourceRoot":""}