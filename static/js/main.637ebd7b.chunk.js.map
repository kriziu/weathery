{"version":3,"sources":["api/forecast.ts","utils/tempConverter.ts","utils/icons.tsx","components/weather/CurrentWeather.tsx","utils/gradients.ts","components/weather/DetailWeather.tsx","components/weather/WeatherContainer.tsx","constants/styles.ts","components/weather/FutureWeather.tsx","components/weather/HourWeather.tsx","components/Settings.tsx","components/InputLocation.tsx","components/MapGoogle.tsx","components/LocationSlider.tsx","components/App.tsx","index.tsx"],"names":["getForecast","coords","a","lat","lng","axios","get","params","lon","appid","result","weather","data","tempConverter","type","value","Math","round","icons","size","CurrentWeather","props","degree","useContext","DegreeContext","px","justify","alignItems","height","spacing","mr","temp","orientation","borderColor","opacity","main","w","h","icon","textAlign","mt","feels_like","ml","transform","pop","toFixed","justifyContent","flexDirection","wind_speed","wind_deg","gradients","StyledSVG","styled","svg","DetailWeather","sunrise","Date","sunset","moonrise","moonset","y","bgGradient","pb","xmlns","viewBox","fill","fillOpacity","d","lg","getHours","getMinutes","py","columns","pressure","clouds","uvi","humidity","dew_point","morn","day","eve","night","WeatherContainer","children","title","margin","mb","md","position","zIndex","overflowX","borderRadius","namesOfDays","FutureWeather","days","Object","values","useState","selectedDay","setSelectedDay","isChanging","setIsChanging","map","index","date","dt","p","bgColor","cursor","onClick","setTimeout","handleSelectedDayChange","transition","my","getDay","length","in","HourWeather","hours","hour","fontSize","renderHours","Settings","forecast","setSettingsShown","settingsShown","direction","style","display","color","e","stopPropagation","right","top","variant","htmlFor","id","InputLocation","setCoords","inputValue","setInputValue","browserCoords","setBrowserCoords","handleLocationSelect","geocodeByAddress","getLatLng","latLng","useEffect","navigator","geolocation","getCurrentPosition","pos","latitude","longitude","onChange","onSelect","searchOptions","location","google","maps","LatLng","radius","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","unmountOnExit","border","suggestion","i","padding","backgroundColor","active","key","description","mapStyles","width","mapOptions","streetViewControl","MapGoogle","geoCoords","zoom","center","mapContainerStyle","options","LocationSlider","changingLocation","setChangingLocation","pt","createContext","setDegree","App","contextValue","setLocation","setForecast","setLoading","useResizeObserver","ref","Geocode","setApiKey","fromLatLng","toString","then","response","city","state","country","results","address_components","forEach","addressComponent","types","long_name","catch","res","Provider","current","daily","hourly","path","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.637ebd7b.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { icons } from '../utils/icons';\r\n\r\ninterface Description {\r\n  description: string;\r\n  icon: keyof typeof icons;\r\n  id: number;\r\n  main: string;\r\n}\r\n\r\n// TODO: Dziedziczenie bo duzo pol sie powtarza\r\n\r\ninterface SmallWeatherType {\r\n  clouds: number;\r\n  dew_point: number;\r\n  dt: number;\r\n  humidity: number;\r\n  pressure: number;\r\n  sunrise: number;\r\n  sunset: number;\r\n  uvi: number;\r\n  weather: Description[];\r\n  wind_deg: number;\r\n  wind_gust: number;\r\n  wind_speed: number;\r\n}\r\n\r\nexport interface WeatherType extends SmallWeatherType {\r\n  feels_like: number;\r\n  temp: number;\r\n  visibility: number;\r\n}\r\n\r\nexport interface FutureWeatherType extends SmallWeatherType {\r\n  feels_like: {\r\n    day: number;\r\n    eve: number;\r\n    morn: number;\r\n    night: number;\r\n  };\r\n  moon_phase: number;\r\n  moonrise: number;\r\n  moonset: number;\r\n  pop: number;\r\n  rain: number;\r\n  temp: {\r\n    day: number;\r\n    eve: number;\r\n    morn: number;\r\n    night: number;\r\n    max: number;\r\n    min: number;\r\n  };\r\n}\r\n\r\nexport interface HourlyWeatherType extends SmallWeatherType {\r\n  feels_like: number;\r\n  pop: number;\r\n  temp: number;\r\n  visibility: number;\r\n}\r\n\r\nexport interface ResponseDataType {\r\n  current: WeatherType;\r\n  daily: FutureWeatherType[];\r\n  hourly: HourlyWeatherType[];\r\n}\r\n\r\nexport const getForecast = async (coords: {\r\n  lat: number;\r\n  lng: number;\r\n}): Promise<ResponseDataType> => {\r\n  const { lat, lng } = coords;\r\n\r\n  const result = await axios.get(\r\n    `https://api.openweathermap.org/data/2.5/onecall`,\r\n    {\r\n      params: {\r\n        lat,\r\n        lon: lng,\r\n        appid: '8128f6d612d3981a1bcc39e4639592d3',\r\n      },\r\n    }\r\n  );\r\n\r\n  const weather: ResponseDataType = result.data;\r\n\r\n  return weather;\r\n};\r\n","export const tempConverter = (type: 'C' | 'F', value: number): number => {\r\n  return type === 'C'\r\n    ? Math.round(value - 273.15)\r\n    : Math.round(((value - 273.15) * 9) / 5 + 32);\r\n};\r\n","import {\r\n  WiCloud,\r\n  WiCloudy,\r\n  WiDayCloudy,\r\n  WiDayRain,\r\n  WiDaySunny,\r\n  WiFog,\r\n  WiNightClear,\r\n  WiNightCloudy,\r\n  WiNightRain,\r\n  WiRain,\r\n  WiSnow,\r\n  WiThunderstorm,\r\n} from 'react-icons/wi';\r\n\r\nexport const icons = {\r\n  '01d': <WiDaySunny size=\"100%\" />,\r\n  '01n': <WiNightClear size=\"100%\" />,\r\n  '02d': <WiDayCloudy size=\"100%\" />,\r\n  '02n': <WiNightCloudy size=\"100%\" />,\r\n  '03d': <WiCloud size=\"100%\" />,\r\n  '03n': <WiCloud size=\"100%\" />,\r\n  '04d': <WiCloudy size=\"100%\" />,\r\n  '04n': <WiCloudy size=\"100%\" />,\r\n  '09d': <WiRain size=\"100%\" />,\r\n  '09n': <WiRain size=\"100%\" />,\r\n  '10d': <WiDayRain size=\"100%\" />,\r\n  '10n': <WiNightRain size=\"100%\" />,\r\n  '11d': <WiThunderstorm size=\"100%\" />,\r\n  '11n': <WiThunderstorm size=\"100%\" />,\r\n  '13d': <WiSnow size=\"100%\" />,\r\n  '13n': <WiSnow size=\"100%\" />,\r\n  '50d': <WiFog size=\"100%\" />,\r\n  '50n': <WiFog size=\"100%\" />,\r\n};\r\n","import { FC, useContext } from 'react';\r\n\r\nimport { Box, Flex, Heading, HStack } from '@chakra-ui/layout';\r\nimport { Stat, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Divider } from '@chakra-ui/react';\r\nimport { TiLocationArrow } from 'react-icons/ti';\r\n\r\nimport { WeatherType } from '../../api/forecast';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { icons } from '../../utils/icons';\r\n\r\ninterface CurrentWeatherType extends WeatherType {\r\n  feels_like: number;\r\n  pop: number;\r\n}\r\n\r\nconst CurrentWeather: FC<CurrentWeatherType> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n\r\n  return (\r\n    <Box px={[5, 10]}>\r\n      <Box>\r\n        <Flex justify=\"center\" alignItems=\"center\">\r\n          <HStack height={16} alignItems=\"center\" spacing={2} mr={[2, 10]}>\r\n            <Heading size=\"4xl\">{tempConverter(degree, props.temp)}°</Heading>\r\n            <Divider orientation=\"vertical\" borderColor=\"black\" opacity={0.2} />\r\n            <Heading size=\"lg\">{props.weather[0].main}</Heading>\r\n          </HStack>\r\n          <Box w={24} h={24}>\r\n            {icons[props.weather[0].icon]}\r\n          </Box>\r\n        </Flex>\r\n        <Heading size=\"md\" textAlign=\"center\" mt={3}>\r\n          Feels like {tempConverter(degree, props.feels_like)}°\r\n        </Heading>\r\n      </Box>\r\n      <Flex mt={5} w={[200, 200, 300]} ml=\"50%\" transform=\"translateX(-50%)\">\r\n        <Stat textAlign=\"center\">\r\n          <StatLabel>Precipitation</StatLabel>\r\n          <StatNumber>{(props.pop * 100).toFixed(0)}%</StatNumber>\r\n        </Stat>\r\n        <Stat textAlign=\"center\">\r\n          <StatLabel>Wind</StatLabel>\r\n          <StatNumber>\r\n            <Flex\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              flexDirection=\"column\"\r\n            >\r\n              {props.wind_speed} m/s\r\n              <Box transform={`rotate(${props.wind_deg - 45}deg)`}>\r\n                <TiLocationArrow size={32} />\r\n              </Box>\r\n            </Flex>\r\n          </StatNumber>\r\n        </Stat>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","export const gradients = {\r\n  '01d': 'linear(to-tr, yellow.300, red.500)',\r\n  '01n': 'linear(to-tr, gray.700, black)',\r\n  '02d': 'linear(to-tr, gray.400, gray.500)',\r\n  '02n': 'linear(to-tr, gray.700, black)',\r\n  '03d': 'linear(to-tr, gray.500, gray.600)',\r\n  '03n': 'linear(to-tr, gray.700, black)',\r\n  '04d': 'linear(to-tr, gray.500, gray.700)',\r\n  '04n': 'linear(to-tr, gray.700, black)',\r\n  '09d': 'linear(to-tr, blue.600, gray.600)',\r\n  '09n': 'linear(to-tr, gray.700, black)',\r\n  '10d': 'linear(to-tr, blue.600, gray.600)',\r\n  '10n': 'linear(to-tr, gray.700, black)',\r\n  '11d': 'linear(to-tr, blue.700, gray.700)',\r\n  '11n': 'linear(to-tr, gray.700, black)',\r\n  '13d': 'linear(to-tr, blue.300, blue.50)',\r\n  '13n': 'linear(to-tr, gray.700, black)',\r\n  '50d': 'linear(to-tr, gray.400, gray.500)',\r\n  '50n': 'linear(to-tr, gray.700, black)',\r\n};\r\n","import { FC, useContext } from 'react';\r\n\r\nimport { Box, Center, Flex, Heading, SimpleGrid } from '@chakra-ui/layout';\r\nimport { Stat, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Divider } from '@chakra-ui/react';\r\nimport { FiSunrise, FiSunset } from 'react-icons/fi';\r\nimport styled from '@emotion/styled';\r\nimport { WiMoonrise, WiMoonset } from 'react-icons/wi';\r\nimport { Parallax } from 'react-scroll-parallax';\r\n\r\nimport { FutureWeatherType } from '../../api/forecast';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { gradients } from '../../utils/gradients';\r\nimport { TiLocationArrow } from 'react-icons/ti';\r\n\r\nconst StyledSVG = styled.svg`\r\n  display: block;\r\n  left: 0;\r\n  transform: rotate(180deg) translateY(1px);\r\n`;\r\n\r\nconst DetailWeather: FC<FutureWeatherType> = (props): JSX.Element => {\r\n  const { degree } = useContext(DegreeContext);\r\n  const sunrise = new Date(props.sunrise * 1000);\r\n  const sunset = new Date(props.sunset * 1000);\r\n  const moonrise = new Date(props.moonrise * 1000);\r\n  const moonset = new Date(props.moonset * 1000);\r\n\r\n  return (\r\n    <Parallax y={[20, -10]}>\r\n      <Box bgGradient={gradients[props.weather[0].icon]} pb={10}>\r\n        <StyledSVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\r\n          <path\r\n            fill=\"#fff\"\r\n            fillOpacity=\"1\"\r\n            d=\"M0,128L48,133.3C96,139,192,149,288,144C384,139,480,117,576,106.7C672,96,768,96,864,112C960,128,1056,160,1152,170.7C1248,181,1344,171,1392,165.3L1440,160L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n          ></path>\r\n        </StyledSVG>\r\n        <Heading size=\"xl\" textAlign=\"center\" mt={-2}>\r\n          Details\r\n        </Heading>\r\n\r\n        <Box\r\n          w={{ lg: 350 }}\r\n          ml={{ lg: '50%' }}\r\n          transform={{ lg: 'translateX(-50%)' }}\r\n        >\r\n          <Flex mt={5} px={['10vw', '20vw', '30vw', 0]}>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <FiSunrise size={24} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {sunrise.getHours()}:\r\n                {sunrise.getMinutes() < 10\r\n                  ? '0' + sunrise.getMinutes()\r\n                  : sunrise.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <FiSunset size={24} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {sunset.getHours()}:\r\n                {sunset.getMinutes() < 10\r\n                  ? '0' + sunset.getMinutes()\r\n                  : sunset.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n          </Flex>\r\n          <Center>\r\n            <Divider borderColor=\"black\" opacity={0.1} w={64} py={2} />\r\n          </Center>\r\n\r\n          <SimpleGrid\r\n            mt={5}\r\n            px={['10vw', '20vw', '30vw', 0]}\r\n            columns={3}\r\n            spacing={2}\r\n          >\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Pressure</StatLabel>\r\n              <StatNumber>{props.pressure}</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Rain</StatLabel>\r\n              <StatNumber>{(props.pop * 100).toFixed()}%</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Clouds</StatLabel>\r\n              <StatNumber>{props.clouds}%</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>UV</StatLabel>\r\n              <StatNumber>{props.uvi}</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Humidity</StatLabel>\r\n              <StatNumber>{props.humidity}%</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Dew point</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.dew_point)}°</StatNumber>\r\n            </Stat>\r\n          </SimpleGrid>\r\n          <Center>\r\n            <Divider borderColor=\"black\" opacity={0.1} w={64} py={2} />\r\n          </Center>\r\n          <Heading size=\"md\" textAlign=\"center\" mt={5}>\r\n            Temperature\r\n          </Heading>\r\n          <Flex px={['10vw', '20vw', '30vw', 0]} mt={2}>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Morning</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.temp.morn)}°</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Day</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.temp.day)}°</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Evening</StatLabel>\r\n              <StatNumber>{tempConverter(degree, props.temp.eve)}°</StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>Night</StatLabel>\r\n              <StatNumber>\r\n                {tempConverter(degree, props.temp.night)}°\r\n              </StatNumber>\r\n            </Stat>\r\n          </Flex>\r\n\r\n          <Stat textAlign=\"center\">\r\n            <StatLabel>\r\n              <Heading size=\"sm\" textAlign=\"center\" mt={5}>\r\n                Wind\r\n              </Heading>\r\n            </StatLabel>\r\n            <StatNumber>\r\n              <Flex\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n                flexDirection=\"column\"\r\n              >\r\n                {props.wind_speed} m/s\r\n                <Box transform={`rotate(${props.wind_deg - 45}deg)`}>\r\n                  <TiLocationArrow size={32} />\r\n                </Box>\r\n              </Flex>\r\n            </StatNumber>\r\n          </Stat>\r\n\r\n          <Flex mt={5} px={['10vw', '20vw', '30vw', 0]}>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <WiMoonrise size={34} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {moonrise.getHours()}:\r\n                {moonrise.getMinutes() < 10\r\n                  ? '0' + moonrise.getMinutes()\r\n                  : moonrise.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n            <Stat textAlign=\"center\">\r\n              <StatLabel>\r\n                <Center>\r\n                  <WiMoonset size={34} />\r\n                </Center>\r\n              </StatLabel>\r\n              <StatNumber>\r\n                {moonset.getHours()}:\r\n                {moonset.getMinutes() < 10\r\n                  ? '0' + moonset.getMinutes()\r\n                  : moonset.getMinutes()}\r\n              </StatNumber>\r\n            </Stat>\r\n          </Flex>\r\n        </Box>\r\n      </Box>\r\n    </Parallax>\r\n  );\r\n};\r\n\r\nexport default DetailWeather;\r\n","import { FC } from 'react';\r\n\r\nimport { Box, Heading, HStack } from '@chakra-ui/layout';\r\n\r\nconst WeatherContainer: FC<{ title: string; margin?: number }> = ({\r\n  children,\r\n  title,\r\n  margin = 14,\r\n}): JSX.Element => {\r\n  return (\r\n    <Box\r\n      mb={margin}\r\n      w={{ md: 500, lg: 750 }}\r\n      ml={{ md: '50%' }}\r\n      transform={{ md: 'translateX(-50%)' }}\r\n      px={[5, 10]}\r\n      position=\"relative\"\r\n      zIndex={1}\r\n    >\r\n      <Heading mb={4}>{title}</Heading>\r\n      <HStack spacing={6} overflowX=\"scroll\" px={2} pb={4}>\r\n        {children}\r\n      </HStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WeatherContainer;\r\n","export const borderRadius = '.5rem';\r\nexport const borderWidth = '1px';\r\n","import { FC, useContext, Fragment, useState } from 'react';\r\n\r\nimport { Box, Flex } from '@chakra-ui/layout';\r\nimport { Stat, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Divider } from '@chakra-ui/react';\r\nimport { SlideFade } from '@chakra-ui/transition';\r\n\r\nimport DetailWeather from './DetailWeather';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { FutureWeatherType } from '../../api/forecast';\r\nimport { icons } from '../../utils/icons';\r\nimport WeatherContainer from './WeatherContainer';\r\nimport { borderRadius } from '../../constants/styles';\r\n\r\nconst namesOfDays = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday',\r\n];\r\n\r\nconst FutureWeather: FC<FutureWeatherType[]> = (props): JSX.Element => {\r\n  const degree = useContext(DegreeContext);\r\n  const days = Object.values(props);\r\n\r\n  const [selectedDay, setSelectedDay] = useState(0);\r\n  const [isChanging, setIsChanging] = useState(false);\r\n\r\n  const handleSelectedDayChange = (index: number): void => {\r\n    setIsChanging(true);\r\n\r\n    setTimeout(() => {\r\n      setSelectedDay(index);\r\n      setIsChanging(false);\r\n    }, 200);\r\n  };\r\n\r\n  const renderDays = (): JSX.Element[] => {\r\n    return days.map((day, index) => {\r\n      const date = new Date(day.dt * 1000);\r\n\r\n      return (\r\n        <Fragment key={index}>\r\n          <Flex\r\n            flexDirection=\"column\"\r\n            alignItems=\"center\"\r\n            p={4}\r\n            bgColor={index === selectedDay ? 'gray.100' : 'transparent'}\r\n            borderRadius={borderRadius}\r\n            cursor=\"pointer\"\r\n            onClick={() => handleSelectedDayChange(index)}\r\n            transition=\"all .2s\"\r\n          >\r\n            <Box w={12} h={12}>\r\n              {icons[day.weather[0].icon]}\r\n            </Box>\r\n\r\n            <Divider borderColor=\"black\" opacity={0.1} my={2} />\r\n            <Stat textAlign=\"center\">\r\n              <StatNumber>{tempConverter(degree, day.temp.day)}°</StatNumber>\r\n              <StatLabel>\r\n                {index === 0 ? 'Today' : namesOfDays[date.getDay()]}\r\n              </StatLabel>\r\n            </Stat>\r\n          </Flex>\r\n          {index !== days.length - 1 && (\r\n            <Divider\r\n              orientation=\"vertical\"\r\n              height={20}\r\n              borderColor=\"black\"\r\n              opacity={0.1}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <WeatherContainer title=\"Forecast\" margin={-6}>\r\n        {renderDays()}\r\n      </WeatherContainer>\r\n      <SlideFade in={!isChanging}>\r\n        <DetailWeather {...days[selectedDay]} />\r\n      </SlideFade>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FutureWeather;\r\n","import { FC, useContext, Fragment } from 'react';\r\n\r\nimport { Flex } from '@chakra-ui/layout';\r\nimport { Stat, StatHelpText, StatLabel, StatNumber } from '@chakra-ui/stat';\r\nimport { Center, Divider } from '@chakra-ui/react';\r\nimport { WiRaindrop } from 'react-icons/wi';\r\nimport { Text } from '@chakra-ui/layout';\r\n\r\nimport { HourlyWeatherType } from '../../api/forecast';\r\nimport { tempConverter } from '../../utils/tempConverter';\r\nimport { DegreeContext } from '../App';\r\nimport { icons } from '../../utils/icons';\r\nimport WeatherContainer from './WeatherContainer';\r\n\r\nconst HourWeather: FC<HourlyWeatherType[]> = (props): JSX.Element => {\r\n  const degree = useContext(DegreeContext);\r\n\r\n  const renderHours = (): JSX.Element[] => {\r\n    const hours = Object.values(props);\r\n\r\n    return hours.map((hour, index) => {\r\n      const date = new Date(hour.dt * 1000);\r\n\r\n      return (\r\n        <Fragment key={index}>\r\n          <Stat textAlign=\"center\">\r\n            <StatLabel fontSize=\"lg\">{date.getHours()}:00</StatLabel>\r\n            <Center w={12} h={12}>\r\n              {icons[hour.weather[0].icon]}\r\n            </Center>\r\n            <StatNumber>{tempConverter(degree, hour.temp)}°</StatNumber>\r\n            <StatHelpText ml={-4}>\r\n              <Center>\r\n                <Flex alignItems=\"center\">\r\n                  <WiRaindrop size={40} />\r\n                  <Text ml={-2}>{(hour.pop * 100).toFixed(0)}%</Text>\r\n                </Flex>\r\n              </Center>\r\n            </StatHelpText>\r\n          </Stat>\r\n          {index !== hours.length - 1 && (\r\n            <Divider\r\n              orientation=\"vertical\"\r\n              height={20}\r\n              borderColor=\"black\"\r\n              opacity={0.1}\r\n            />\r\n          )}\r\n        </Fragment>\r\n      );\r\n    });\r\n  };\r\n\r\n  return <WeatherContainer title=\"Hour\">{renderHours()}</WeatherContainer>;\r\n};\r\n\r\nexport default HourWeather;\r\n","import { IconButton } from '@chakra-ui/button';\r\nimport { FormLabel } from '@chakra-ui/form-control';\r\nimport { Box, Flex, Heading } from '@chakra-ui/layout';\r\nimport { Switch } from '@chakra-ui/switch';\r\nimport { Slide } from '@chakra-ui/transition';\r\nimport { FC } from 'react';\r\nimport { IoClose } from 'react-icons/io5';\r\nimport { WeatherType } from '../api/forecast';\r\nimport { gradients } from '../utils/gradients';\r\n\r\ninterface SettingsProps {\r\n  forecast: WeatherType;\r\n  settingsShown: boolean;\r\n  setSettingsShown: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst Settings: FC<SettingsProps> = ({\r\n  forecast,\r\n  setSettingsShown,\r\n  settingsShown,\r\n}): JSX.Element => {\r\n  return (\r\n    <Slide\r\n      in={settingsShown}\r\n      direction=\"right\"\r\n      style={{ zIndex: 5, display: 'flex', justifyContent: 'flex-end' }}\r\n      onClick={() => setSettingsShown(false)}\r\n    >\r\n      <Box\r\n        bgGradient={gradients[forecast.weather[0].icon]}\r\n        color={forecast.weather[0].icon[2] === 'n' ? 'gray.500' : ''}\r\n        w=\"3xs\"\r\n        height=\"full\"\r\n        px={5}\r\n        pb={40}\r\n        onClick={e => e.stopPropagation()}\r\n      >\r\n        <IconButton\r\n          position=\"absolute\"\r\n          right={[4, 6, 8, 10]}\r\n          top={[4, 6, 8, 10]}\r\n          zIndex={10}\r\n          aria-label=\"settings\"\r\n          variant=\"ghost\"\r\n          onClick={() => setSettingsShown(false)}\r\n          icon={<IoClose size={38} />}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-around\" mt={24} px={6}>\r\n          <Heading>C</Heading>\r\n          <Switch size=\"lg\" aria-label=\"Change to Fahrenheit\" />\r\n          <Heading>F</Heading>\r\n        </Flex>\r\n\r\n        <Flex\r\n          alignItems=\"center\"\r\n          flexDirection=\"column\"\r\n          justifyContent=\"center\"\r\n          mt={6}\r\n        >\r\n          <FormLabel htmlFor=\"dark\">\r\n            <Heading size=\"md\">Dark mode</Heading>\r\n          </FormLabel>\r\n          <Switch size=\"lg\" aria-label=\"Dark mode\" id=\"dark\" />\r\n        </Flex>\r\n      </Box>\r\n    </Slide>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","import { FC, useEffect, useState } from 'react';\r\n\r\nimport { Input } from '@chakra-ui/input';\r\nimport { Spinner } from '@chakra-ui/spinner';\r\nimport { Box, Center, List, ListItem } from '@chakra-ui/layout';\r\nimport { Collapse } from '@chakra-ui/transition';\r\n\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng,\r\n} from 'react-places-autocomplete';\r\nimport { borderRadius, borderWidth } from '../constants/styles';\r\n\r\ninterface InputLocationProps {\r\n  setCoords: React.Dispatch<\r\n    React.SetStateAction<{\r\n      lat: number;\r\n      lng: number;\r\n    }>\r\n  >;\r\n}\r\n\r\nconst InputLocation: FC<InputLocationProps> = ({ setCoords }): JSX.Element => {\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [browserCoords, setBrowserCoords] = useState({ lat: 0, lng: 0 });\r\n\r\n  const handleLocationSelect = async (value: string) => {\r\n    const result = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(result[0]);\r\n    setCoords(latLng);\r\n    setInputValue('');\r\n  };\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(pos => {\r\n      const coords = { lat: pos.coords.latitude, lng: pos.coords.longitude };\r\n      if (!coords) return;\r\n\r\n      setCoords(coords);\r\n      setBrowserCoords(coords);\r\n    });\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <PlacesAutocomplete\r\n      value={inputValue}\r\n      onChange={setInputValue}\r\n      onSelect={handleLocationSelect}\r\n      searchOptions={{\r\n        location: new google.maps.LatLng(browserCoords),\r\n        radius: 2000,\r\n      }}\r\n    >\r\n      {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <Box px={[5, 10]} position=\"relative\">\r\n          <Input {...getInputProps({ placeholder: 'Search location' })} />\r\n\r\n          <Collapse in={loading} unmountOnExit>\r\n            <Center mt={4}>\r\n              <Spinner />\r\n            </Center>\r\n          </Collapse>\r\n\r\n          <Collapse in={suggestions.length ? true : false} unmountOnExit>\r\n            <List\r\n              zIndex={100}\r\n              w=\"100%\"\r\n              spacing={2}\r\n              border={borderWidth}\r\n              borderColor=\"gray.200\"\r\n              p={2}\r\n              borderRadius={4}\r\n            >\r\n              {suggestions.map((suggestion, i) => {\r\n                const style = {\r\n                  padding: '.5rem',\r\n                  borderRadius: borderRadius,\r\n                  backgroundColor: suggestion.active ? '#e6e6e6' : '',\r\n                };\r\n                return (\r\n                  <ListItem\r\n                    {...getSuggestionItemProps(suggestion, { style })}\r\n                    key={i}\r\n                  >\r\n                    {suggestion.description}\r\n                  </ListItem>\r\n                );\r\n              })}\r\n            </List>\r\n          </Collapse>\r\n        </Box>\r\n      )}\r\n    </PlacesAutocomplete>\r\n  );\r\n};\r\n\r\nexport default InputLocation;\r\n","import { FC } from 'react';\r\n\r\nimport { Box } from '@chakra-ui/layout';\r\nimport { GoogleMap, Marker } from '@react-google-maps/api';\r\n\r\nimport { borderRadius } from '../constants/styles';\r\n\r\nconst mapStyles = {\r\n  height: '100%',\r\n  width: '100%',\r\n  borderRadius: borderRadius,\r\n};\r\n\r\nconst mapOptions: google.maps.MapOptions = {\r\n  streetViewControl: false,\r\n};\r\n\r\ninterface MapGoogleProps {\r\n  coords: { lat: number; lng: number };\r\n  setCoords: React.Dispatch<\r\n    React.SetStateAction<{\r\n      lat: number;\r\n      lng: number;\r\n    }>\r\n  >;\r\n}\r\n\r\nconst MapGoogle: FC<MapGoogleProps> = ({ coords, setCoords }) => {\r\n  const handleMapClick = (e: any): void => {\r\n    setCoords({ lat: e.latLng.lat(), lng: e.latLng.lng() });\r\n  };\r\n\r\n  let geoCoords = coords;\r\n\r\n  if (coords.lat === 0 && coords.lng === 0)\r\n    geoCoords = { lat: 52.2297, lng: 21.0122 };\r\n\r\n  return (\r\n    <Box h={500}>\r\n      <GoogleMap\r\n        zoom={8}\r\n        center={geoCoords}\r\n        onClick={handleMapClick}\r\n        mapContainerStyle={mapStyles}\r\n        options={mapOptions}\r\n      >\r\n        <Marker position={geoCoords} />\r\n      </GoogleMap>\r\n    </Box>\r\n  );\r\n};\r\nexport default MapGoogle;\r\n","import { Box, Heading } from '@chakra-ui/layout';\r\nimport { Slide } from '@chakra-ui/transition';\r\nimport { FC } from 'react';\r\nimport InputLocation from './InputLocation';\r\nimport MapGoogle from './MapGoogle';\r\n\r\ninterface LocationSliderProps {\r\n  changingLocation: boolean;\r\n  location: string;\r\n  coords: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  setCoords: React.Dispatch<\r\n    React.SetStateAction<{\r\n      lat: number;\r\n      lng: number;\r\n    }>\r\n  >;\r\n  setChangingLocation: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst LocationSlider: FC<LocationSliderProps> = ({\r\n  changingLocation,\r\n  location,\r\n  coords,\r\n  setCoords,\r\n  setChangingLocation,\r\n}): JSX.Element => (\r\n  <Slide in={changingLocation} direction=\"top\" style={{ zIndex: 5 }}>\r\n    <Box bgColor=\"white\" w=\"full\" height=\"full\" px={5} pb={40}>\r\n      <Heading\r\n        size=\"xl\"\r\n        textAlign=\"center\"\r\n        pt={5}\r\n        cursor=\"pointer\"\r\n        onClick={() =>\r\n          location !== 'No location selected' && setChangingLocation(false)\r\n        }\r\n      >\r\n        {location}\r\n      </Heading>\r\n      <InputLocation setCoords={setCoords} />\r\n      <Box p={[5, 10]} height=\"sm\">\r\n        <MapGoogle coords={coords} setCoords={setCoords} />\r\n      </Box>\r\n    </Box>\r\n  </Slide>\r\n);\r\n\r\nexport default LocationSlider;\r\n","import { createContext, FC, useEffect, useState } from 'react';\r\n\r\nimport { ChakraProvider } from '@chakra-ui/react';\r\nimport { Box, Center, Heading } from '@chakra-ui/layout';\r\nimport { Fade } from '@chakra-ui/transition';\r\nimport { Spinner } from '@chakra-ui/spinner';\r\nimport { IconButton } from '@chakra-ui/button';\r\n\r\nimport Geocode from 'react-geocode';\r\nimport styled from '@emotion/styled';\r\nimport { ParallaxProvider } from 'react-scroll-parallax';\r\nimport useResizeObserver from 'use-resize-observer';\r\nimport { IoSettingsOutline } from 'react-icons/io5';\r\n\r\nimport { getForecast, ResponseDataType } from '../api/forecast';\r\nimport CurrentWeather from './weather/CurrentWeather';\r\nimport FutureWeather from './weather/FutureWeather';\r\nimport HourWeather from './weather/HourWeather';\r\nimport { gradients } from '../utils/gradients';\r\nimport Settings from './Settings';\r\nimport LocationSlider from './LocationSlider';\r\n\r\ninterface GeocodeResponseType {\r\n  results: {\r\n    address_components: {\r\n      long_name: string;\r\n      short_name: string;\r\n      types: string[];\r\n    }[];\r\n  }[];\r\n}\r\n\r\nexport const StyledSVG = styled.svg`\r\n  display: block;\r\n  left: 0;\r\n  transform: translateY(1px); // small fix on mobiles\r\n`;\r\n\r\n// TODO:\r\n// PRZENIESC DO DWOCH OSOBNYCH KOMPONENTOW\r\n// GOOGLE MAPS I USLUGI PRZENIESC DO FOLDERU (STWORZYC NOWY)\r\n// DARK MODE I FAHRENHEIT\r\n// MAYBE NA KOMPY WYGLAD\r\n\r\nexport const DegreeContext = createContext<{\r\n  degree: 'C' | 'F';\r\n  setDegree: React.Dispatch<React.SetStateAction<'C' | 'F'>>;\r\n}>({\r\n  degree: 'C',\r\n  setDegree: () => {},\r\n});\r\n\r\nconst App: FC = (): JSX.Element => {\r\n  const [degree, setDegree] = useState<'C' | 'F'>('C');\r\n  const contextValue = { degree, setDegree };\r\n\r\n  const [location, setLocation] = useState('No location selected');\r\n  const [coords, setCoords] = useState({ lat: 0, lng: 0 });\r\n  const [changingLocation, setChangingLocation] = useState(true);\r\n  const [forecast, setForecast] = useState<ResponseDataType>();\r\n  const [loading, setLoading] = useState(false);\r\n  const [settingsShown, setSettingsShown] = useState(false);\r\n\r\n  const { ref, height = 1 } = useResizeObserver();\r\n\r\n  const changeLocation = (): void => {\r\n    Geocode.fromLatLng(coords.lat.toString(), coords.lng.toString())\r\n      .then((response: GeocodeResponseType) => {\r\n        let city = '',\r\n          state = '',\r\n          country = '';\r\n\r\n        response.results[0].address_components.forEach(addressComponent => {\r\n          addressComponent.types.forEach(type => {\r\n            switch (type) {\r\n              case 'neighborhood':\r\n                city = addressComponent.long_name + ',';\r\n                break;\r\n              case 'postal_town':\r\n                city = addressComponent.long_name + ',';\r\n                break;\r\n              case 'sublocality':\r\n                city = addressComponent.long_name + ',';\r\n                break;\r\n              case 'locality':\r\n                city = addressComponent.long_name + ',';\r\n                break;\r\n              case 'administrative_area_level_1':\r\n                state = addressComponent.long_name + ',';\r\n                break;\r\n              case 'administrative_area_level_2':\r\n                state = addressComponent.long_name + ',';\r\n                break;\r\n              case 'country':\r\n                country = addressComponent.long_name;\r\n                break;\r\n            }\r\n          });\r\n        });\r\n        setLocation(`${city} ${state} ${country}`);\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  useEffect(() => {\r\n    Geocode.setApiKey('AIzaSyAaNjFR_LN6izfmGEPx_1ZCYMkNfZhxSQs');\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (coords.lat === 0 && coords.lng === 0) return;\r\n\r\n    changeLocation();\r\n    setLoading(true);\r\n    getForecast(coords).then(res => {\r\n      setForecast(res);\r\n      setLoading(false);\r\n    });\r\n    setChangingLocation(false);\r\n\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [coords]);\r\n\r\n  return (\r\n    <ParallaxProvider>\r\n      <ChakraProvider>\r\n        <DegreeContext.Provider value={contextValue}>\r\n          <LocationSlider\r\n            changingLocation={changingLocation}\r\n            coords={coords}\r\n            setCoords={setCoords}\r\n            location={location}\r\n            setChangingLocation={setChangingLocation}\r\n          />\r\n\r\n          {forecast && (\r\n            <Settings\r\n              forecast={forecast.current}\r\n              setSettingsShown={setSettingsShown}\r\n              settingsShown={settingsShown}\r\n            />\r\n          )}\r\n\r\n          {loading ? (\r\n            <Center h=\"100vh\" w=\"100vw\">\r\n              <Spinner size=\"xl\" />\r\n            </Center>\r\n          ) : (\r\n            forecast && (\r\n              <Fade in={!loading} unmountOnExit>\r\n                <Box\r\n                  bgGradient={\r\n                    forecast\r\n                      ? gradients[forecast.current.weather[0].icon]\r\n                      : gradients['03d']\r\n                  }\r\n                  position=\"fixed\"\r\n                  width=\"full\"\r\n                  ref={ref}\r\n                  top={0}\r\n                  color={\r\n                    forecast && forecast.current.weather[0].icon[2] === 'n'\r\n                      ? 'gray.500'\r\n                      : ''\r\n                  }\r\n                  pb={[100, 200, 300, 400]}\r\n                >\r\n                  <Box p={[5, 10]} position=\"relative\" pb={0}>\r\n                    <Heading\r\n                      size=\"xl\"\r\n                      textAlign=\"center\"\r\n                      cursor=\"pointer\"\r\n                      mt={8}\r\n                      onClick={() => setChangingLocation(true)}\r\n                    >\r\n                      {location}\r\n                    </Heading>\r\n\r\n                    <IconButton\r\n                      position=\"absolute\"\r\n                      right={[4, 6, 8, 10]}\r\n                      top={[4, 6, 8, 10]}\r\n                      zIndex={5}\r\n                      aria-label=\"settings\"\r\n                      variant=\"ghost\"\r\n                      onClick={() => setSettingsShown(!settingsShown)}\r\n                      icon={<IoSettingsOutline size={38} />}\r\n                    />\r\n\r\n                    <CurrentWeather\r\n                      {...forecast.current}\r\n                      feels_like={forecast.daily[0].feels_like.day}\r\n                      pop={forecast.daily[0].pop}\r\n                    />\r\n                  </Box>\r\n                </Box>\r\n\r\n                <Box\r\n                  transform={[\r\n                    `translateY(${height}px)`,\r\n                    `translateY(${height - 80}px)`,\r\n                    `translateY(${height - 100}px)`,\r\n                  ]}\r\n                  onClick={() =>\r\n                    location !== 'No location selected' &&\r\n                    setChangingLocation(false)\r\n                  }\r\n                >\r\n                  <StyledSVG\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    viewBox=\"0 0 1440 320\"\r\n                  >\r\n                    <path\r\n                      fill=\"#fff\"\r\n                      fillOpacity=\"1\"\r\n                      d=\"M0,192L48,186.7C96,181,192,171,288,181.3C384,192,480,224,576,213.3C672,203,768,149,864,149.3C960,149,1056,203,1152,208C1248,213,1344,171,1392,149.3L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z\"\r\n                    ></path>\r\n                  </StyledSVG>\r\n                  <Box bgColor=\"white\">\r\n                    <HourWeather {...forecast.hourly} />\r\n                    <FutureWeather {...forecast.daily} />\r\n                  </Box>\r\n                </Box>\r\n              </Fade>\r\n            )\r\n          )}\r\n        </DegreeContext.Provider>\r\n      </ChakraProvider>\r\n    </ParallaxProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\n\r\nimport App from './components/App';\r\n\r\nconst path = document.getElementById('root') as HTMLElement;\r\n\r\nReactDOM.render(<App />, path);"],"sourceRoot":""}